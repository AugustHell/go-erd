digraph "GoERD" { 
subgraph "ast" {
label="ast";
 "node-LabeledStmt" [shape=record,label="{LabeledStmt|<f0>Label\ \*Ident|<f1>Colon\ token.Pos|<f2>Stmt\ Stmt}"];
 "node-IfStmt" [shape=record,label="{IfStmt|<f0>If\ token.Pos|<f1>Init\ Stmt|<f2>Cond\ Expr|<f3>Body\ \*BlockStmt|<f4>Else\ Stmt}"];
 "node-Spec" [shape=Mrecord,label="{Spec\ interface|<f0>Node|<f1>specNode\ func\(\)}"];
 "node-ValueSpec" [shape=record,label="{ValueSpec|<f0>Doc\ \*CommentGroup|<f1>Names\ \[\]\*Ident|<f2>Type\ Expr|<f3>Values\ \[\]Expr|<f4>Comment\ \*CommentGroup}"];
 "node-Scope" [shape=record,label="{Scope|<f0>Outer\ \*Scope|<f1>Objects\ map\[string\]\*Object}"];
 "node-Object" [shape=record,label="{Object|<f0>Kind\ ObjKind|<f1>Name\ string|<f2>Decl\ interface\{\}|<f3>Data\ interface\{\}|<f4>Type\ interface\{\}}"];
 "node-posSpan" [shape=record,label="{posSpan|<f0>Start\ token.Pos|<f1>End\ token.Pos}"];
 "node-MapType" [shape=record,label="{MapType|<f0>Map\ token.Pos|<f1>Key\ Expr|<f2>Value\ Expr}"];
 "node-byPos" [shape=rectangle,label="byPos\ \[\]\*CommentGroup"];
 "node-byInterval" [shape=rectangle,label="byInterval\ \[\]Node"];
 "node-ArrayType" [shape=record,label="{ArrayType|<f0>Lbrack\ token.Pos|<f1>Len\ Expr|<f2>Elt\ Expr}"];
 "node-IncDecStmt" [shape=record,label="{IncDecStmt|<f0>X\ Expr|<f1>TokPos\ token.Pos|<f2>Tok\ token.Token}"];
 "node-FieldList" [shape=record,label="{FieldList|<f0>Opening\ token.Pos|<f1>List\ \[\]\*Field|<f2>Closing\ token.Pos}"];
 "node-BasicLit" [shape=record,label="{BasicLit|<f0>ValuePos\ token.Pos|<f1>Kind\ token.Token|<f2>Value\ string}"];
 "node-IndexExpr" [shape=record,label="{IndexExpr|<f0>X\ Expr|<f1>Lbrack\ token.Pos|<f2>Index\ Expr|<f3>Rbrack\ token.Pos}"];
 "node-CommClause" [shape=record,label="{CommClause|<f0>Case\ token.Pos|<f1>Comm\ Stmt|<f2>Colon\ token.Pos|<f3>Body\ \[\]Stmt}"];
 "node-TypeSpec" [shape=record,label="{TypeSpec|<f0>Doc\ \*CommentGroup|<f1>Name\ \*Ident|<f2>Type\ Expr|<f3>Comment\ \*CommentGroup}"];
 "node-Decl" [shape=Mrecord,label="{Decl\ interface|<f0>Node|<f1>declNode\ func\(\)}"];
 "node-CommentGroup" [shape=record,label="{CommentGroup|<f0>List\ \[\]\*Comment}"];
 "node-Ellipsis" [shape=record,label="{Ellipsis|<f0>Ellipsis\ token.Pos|<f1>Elt\ Expr}"];
 "node-CaseClause" [shape=record,label="{CaseClause|<f0>Case\ token.Pos|<f1>List\ \[\]Expr|<f2>Colon\ token.Pos|<f3>Body\ \[\]Stmt}"];
 "node-StructType" [shape=record,label="{StructType|<f0>Struct\ token.Pos|<f1>Fields\ \*FieldList|<f2>Incomplete\ bool}"];
 "node-EmptyStmt" [shape=record,label="{EmptyStmt|<f0>Semicolon\ token.Pos|<f1>Implicit\ bool}"];
 "node-SwitchStmt" [shape=record,label="{SwitchStmt|<f0>Switch\ token.Pos|<f1>Init\ Stmt|<f2>Tag\ Expr|<f3>Body\ \*BlockStmt}"];
 "node-ImportSpec" [shape=record,label="{ImportSpec|<f0>Doc\ \*CommentGroup|<f1>Name\ \*Ident|<f2>Path\ \*BasicLit|<f3>Comment\ \*CommentGroup|<f4>EndPos\ token.Pos}"];
 "node-Filter" [shape=rectangle,label="Filter\ func\(string\)\ \(bool\)"];
 "node-byImportSpec" [shape=rectangle,label="byImportSpec\ \[\]Spec"];
 "node-localError" [shape=record,label="{localError|<f0>err\ error}"];
 "node-CompositeLit" [shape=record,label="{CompositeLit|<f0>Type\ Expr|<f1>Lbrace\ token.Pos|<f2>Elts\ \[\]Expr|<f3>Rbrace\ token.Pos}"];
 "node-nodeStack" [shape=rectangle,label="nodeStack\ \[\]Node"];
 "node-CallExpr" [shape=record,label="{CallExpr|<f0>Fun\ Expr|<f1>Lparen\ token.Pos|<f2>Args\ \[\]Expr|<f3>Ellipsis\ token.Pos|<f4>Rparen\ token.Pos}"];
 "node-printer" [shape=record,label="{printer|<f0>output\ io.Writer|<f1>fset\ \*token.FileSet|<f2>filter\ FieldFilter|<f3>ptrmap\ map\[interface\{\}\]int|<f4>indent\ int|<f5>last\ byte|<f6>line\ int}"];
 "node-Expr" [shape=Mrecord,label="{Expr\ interface|<f0>Node|<f1>exprNode\ func\(\)}"];
 "node-ParenExpr" [shape=record,label="{ParenExpr|<f0>Lparen\ token.Pos|<f1>X\ Expr|<f2>Rparen\ token.Pos}"];
 "node-GenDecl" [shape=record,label="{GenDecl|<f0>Doc\ \*CommentGroup|<f1>TokPos\ token.Pos|<f2>Tok\ token.Token|<f3>Lparen\ token.Pos|<f4>Specs\ \[\]Spec|<f5>Rparen\ token.Pos}"];
 "node-InterfaceType" [shape=record,label="{InterfaceType|<f0>Interface\ token.Pos|<f1>Methods\ \*FieldList|<f2>Incomplete\ bool}"];
 "node-SendStmt" [shape=record,label="{SendStmt|<f0>Chan\ Expr|<f1>Arrow\ token.Pos|<f2>Value\ Expr}"];
 "node-TypeSwitchStmt" [shape=record,label="{TypeSwitchStmt|<f0>Switch\ token.Pos|<f1>Init\ Stmt|<f2>Assign\ Stmt|<f3>Body\ \*BlockStmt}"];
 "node-Ident" [shape=record,label="{Ident|<f0>NamePos\ token.Pos|<f1>Name\ string|<f2>Obj\ \*Object}"];
 "node-SelectorExpr" [shape=record,label="{SelectorExpr|<f0>X\ Expr|<f1>Sel\ \*Ident}"];
 "node-ChanDir" [shape=ellipse,label="ChanDir\ int"];
 "node-ExprStmt" [shape=record,label="{ExprStmt|<f0>X\ Expr}"];
 "node-AssignStmt" [shape=record,label="{AssignStmt|<f0>Lhs\ \[\]Expr|<f1>TokPos\ token.Pos|<f2>Tok\ token.Token|<f3>Rhs\ \[\]Expr}"];
 "node-BlockStmt" [shape=record,label="{BlockStmt|<f0>Lbrace\ token.Pos|<f1>List\ \[\]Stmt|<f2>Rbrace\ token.Pos}"];
 "node-SelectStmt" [shape=record,label="{SelectStmt|<f0>Select\ token.Pos|<f1>Body\ \*BlockStmt}"];
 "node-ForStmt" [shape=record,label="{ForStmt|<f0>For\ token.Pos|<f1>Init\ Stmt|<f2>Cond\ Expr|<f3>Post\ Stmt|<f4>Body\ \*BlockStmt}"];
 "node-RangeStmt" [shape=record,label="{RangeStmt|<f0>For\ token.Pos|<f1>Key\,\ Value\ Expr|<f2>TokPos\ token.Pos|<f3>Tok\ token.Token|<f4>X\ Expr|<f5>Body\ \*BlockStmt}"];
 "node-BadDecl" [shape=record,label="{BadDecl|<f0>From\,\ To\ token.Pos}"];
 "node-FuncDecl" [shape=record,label="{FuncDecl|<f0>Doc\ \*CommentGroup|<f1>Recv\ \*FieldList|<f2>Name\ \*Ident|<f3>Type\ \*FuncType|<f4>Body\ \*BlockStmt}"];
 "node-inspector" [shape=rectangle,label="inspector\ func\(Node\)\ \(bool\)"];
 "node-Node" [shape=Mrecord,label="{Node\ interface|<f0>Pos\ func\(\)\ \(token.Pos\)|<f1>End\ func\(\)\ \(token.Pos\)}"];
 "node-FuncLit" [shape=record,label="{FuncLit|<f0>Type\ \*FuncType|<f1>Body\ \*BlockStmt}"];
 "node-BranchStmt" [shape=record,label="{BranchStmt|<f0>TokPos\ token.Pos|<f1>Tok\ token.Token|<f2>Label\ \*Ident}"];
 "node-File" [shape=record,label="{File|<f0>Doc\ \*CommentGroup|<f1>Package\ token.Pos|<f2>Name\ \*Ident|<f3>Decls\ \[\]Decl|<f4>Scope\ \*Scope|<f5>Imports\ \[\]\*ImportSpec|<f6>Unresolved\ \[\]\*Ident|<f7>Comments\ \[\]\*CommentGroup}"];
 "node-commentListReader" [shape=record,label="{commentListReader|<f0>fset\ \*token.FileSet|<f1>list\ \[\]\*CommentGroup|<f2>index\ int|<f3>comment\ \*CommentGroup|<f4>pos\,\ end\ token.Position}"];
 "node-MergeMode" [shape=ellipse,label="MergeMode\ uint"];
 "node-FieldFilter" [shape=rectangle,label="FieldFilter\ func\(string\,reflect.Value\)\ \(bool\)"];
 "node-Field" [shape=record,label="{Field|<f0>Doc\ \*CommentGroup|<f1>Names\ \[\]\*Ident|<f2>Type\ Expr|<f3>Tag\ \*BasicLit|<f4>Comment\ \*CommentGroup}"];
 "node-FuncType" [shape=record,label="{FuncType|<f0>Func\ token.Pos|<f1>Params\ \*FieldList|<f2>Results\ \*FieldList}"];
 "node-Visitor" [shape=Mrecord,label="{Visitor\ interface|<f0>Visit\ func\(Node\)\ \(Visitor\)}"];
 "node-UnaryExpr" [shape=record,label="{UnaryExpr|<f0>OpPos\ token.Pos|<f1>Op\ token.Token|<f2>X\ Expr}"];
 "node-BinaryExpr" [shape=record,label="{BinaryExpr|<f0>X\ Expr|<f1>OpPos\ token.Pos|<f2>Op\ token.Token|<f3>Y\ Expr}"];
 "node-ChanType" [shape=record,label="{ChanType|<f0>Begin\ token.Pos|<f1>Arrow\ token.Pos|<f2>Dir\ ChanDir|<f3>Value\ Expr}"];
 "node-CommentMap" [shape=rectangle,label="CommentMap\ map\[Node\]\[\]\*CommentGroup"];
 "node-Importer" [shape=rectangle,label="Importer\ func\(map\[string\]\*Object\,string\)\ \(\*Object\,error\)"];
 "node-Stmt" [shape=Mrecord,label="{Stmt\ interface|<f0>Node|<f1>stmtNode\ func\(\)}"];
 "node-Comment" [shape=record,label="{Comment|<f0>Slash\ token.Pos|<f1>Text\ string}"];
 "node-BadExpr" [shape=record,label="{BadExpr|<f0>From\,\ To\ token.Pos}"];
 "node-DeclStmt" [shape=record,label="{DeclStmt|<f0>Decl\ Decl}"];
 "node-DeferStmt" [shape=record,label="{DeferStmt|<f0>Defer\ token.Pos|<f1>Call\ \*CallExpr}"];
 "node-ReturnStmt" [shape=record,label="{ReturnStmt|<f0>Return\ token.Pos|<f1>Results\ \[\]Expr}"];
 "node-ObjKind" [shape=ellipse,label="ObjKind\ int"];
 "node-SliceExpr" [shape=record,label="{SliceExpr|<f0>X\ Expr|<f1>Lbrack\ token.Pos|<f2>Low\ Expr|<f3>High\ Expr|<f4>Max\ Expr|<f5>Slice3\ bool|<f6>Rbrack\ token.Pos}"];
 "node-TypeAssertExpr" [shape=record,label="{TypeAssertExpr|<f0>X\ Expr|<f1>Lparen\ token.Pos|<f2>Type\ Expr|<f3>Rparen\ token.Pos}"];
 "node-StarExpr" [shape=record,label="{StarExpr|<f0>Star\ token.Pos|<f1>X\ Expr}"];
 "node-GoStmt" [shape=record,label="{GoStmt|<f0>Go\ token.Pos|<f1>Call\ \*CallExpr}"];
 "node-Package" [shape=record,label="{Package|<f0>Name\ string|<f1>Scope\ \*Scope|<f2>Imports\ map\[string\]\*Object|<f3>Files\ map\[string\]\*File}"];
 "node-byCommentPos" [shape=rectangle,label="byCommentPos\ \[\]\*CommentGroup"];
 "node-pkgBuilder" [shape=record,label="{pkgBuilder|<f0>fset\ \*token.FileSet|<f1>errors\ scanner.ErrorList}"];
 "node-KeyValueExpr" [shape=record,label="{KeyValueExpr|<f0>Key\ Expr|<f1>Colon\ token.Pos|<f2>Value\ Expr}"];
 "node-BadStmt" [shape=record,label="{BadStmt|<f0>From\,\ To\ token.Pos}"];
"node-FieldList":f1 -> "node-Field";
"node-IndexExpr":f0 -> "node-Expr";
"node-IndexExpr":f2 -> "node-Expr";
"node-CommClause":f1 -> "node-Stmt";
"node-CommClause":f3 -> "node-Stmt";
"node-Decl":f0 -> "node-Node";
"node-CommentGroup":f0 -> "node-Comment";
"node-Ellipsis":f1 -> "node-Expr";
"node-CaseClause":f1 -> "node-Expr";
"node-CaseClause":f3 -> "node-Stmt";
"node-TypeSpec":f0 -> "node-CommentGroup";
"node-TypeSpec":f1 -> "node-Ident";
"node-TypeSpec":f2 -> "node-Expr";
"node-TypeSpec":f3 -> "node-CommentGroup";
"node-CompositeLit":f0 -> "node-Expr";
"node-CompositeLit":f2 -> "node-Expr";
"node-StructType":f1 -> "node-FieldList";
"node-SwitchStmt":f1 -> "node-Stmt";
"node-SwitchStmt":f2 -> "node-Expr";
"node-SwitchStmt":f3 -> "node-BlockStmt";
"node-ImportSpec":f0 -> "node-CommentGroup";
"node-ImportSpec":f1 -> "node-Ident";
"node-ImportSpec":f2 -> "node-BasicLit";
"node-ImportSpec":f3 -> "node-CommentGroup";
"node-CallExpr":f0 -> "node-Expr";
"node-CallExpr":f2 -> "node-Expr";
"node-printer":f2 -> "node-FieldFilter";
"node-Expr":f0 -> "node-Node";
"node-ParenExpr":f1 -> "node-Expr";
"node-GenDecl":f0 -> "node-CommentGroup";
"node-GenDecl":f4 -> "node-Spec";
"node-InterfaceType":f1 -> "node-FieldList";
"node-SendStmt":f0 -> "node-Expr";
"node-SendStmt":f2 -> "node-Expr";
"node-TypeSwitchStmt":f1 -> "node-Stmt";
"node-TypeSwitchStmt":f2 -> "node-Stmt";
"node-TypeSwitchStmt":f3 -> "node-BlockStmt";
"node-Ident":f2 -> "node-Object";
"node-SelectorExpr":f0 -> "node-Expr";
"node-SelectorExpr":f1 -> "node-Ident";
"node-ExprStmt":f0 -> "node-Expr";
"node-AssignStmt":f0 -> "node-Expr";
"node-AssignStmt":f3 -> "node-Expr";
"node-BlockStmt":f1 -> "node-Stmt";
"node-SelectStmt":f1 -> "node-BlockStmt";
"node-ForStmt":f1 -> "node-Stmt";
"node-ForStmt":f2 -> "node-Expr";
"node-ForStmt":f3 -> "node-Stmt";
"node-ForStmt":f4 -> "node-BlockStmt";
"node-inspector":f0 -> "node-Node";
"node-FuncLit":f0 -> "node-FuncType";
"node-FuncLit":f1 -> "node-BlockStmt";
"node-BranchStmt":f2 -> "node-Ident";
"node-RangeStmt":f1 -> "node-Expr";
"node-RangeStmt":f4 -> "node-Expr";
"node-RangeStmt":f5 -> "node-BlockStmt";
"node-FuncDecl":f0 -> "node-CommentGroup";
"node-FuncDecl":f1 -> "node-FieldList";
"node-FuncDecl":f2 -> "node-Ident";
"node-FuncDecl":f3 -> "node-FuncType";
"node-FuncDecl":f4 -> "node-BlockStmt";
"node-Field":f0 -> "node-CommentGroup";
"node-Field":f1 -> "node-Ident";
"node-Field":f2 -> "node-Expr";
"node-Field":f3 -> "node-BasicLit";
"node-Field":f4 -> "node-CommentGroup";
"node-FuncType":f1 -> "node-FieldList";
"node-FuncType":f2 -> "node-FieldList";
"node-File":f0 -> "node-CommentGroup";
"node-File":f2 -> "node-Ident";
"node-File":f3 -> "node-Decl";
"node-File":f4 -> "node-Scope";
"node-File":f5 -> "node-ImportSpec";
"node-File":f6 -> "node-Ident";
"node-File":f7 -> "node-CommentGroup";
"node-commentListReader":f1 -> "node-CommentGroup";
"node-commentListReader":f3 -> "node-CommentGroup";
"node-Visitor":f0 -> "node-Node";
"node-Visitor":f0 -> "node-Visitor";
"node-UnaryExpr":f2 -> "node-Expr";
"node-BinaryExpr":f0 -> "node-Expr";
"node-BinaryExpr":f3 -> "node-Expr";
"node-Importer":f1 -> "node-Object";
"node-Importer":f3 -> "node-Object";
"node-Stmt":f0 -> "node-Node";
"node-ChanType":f2 -> "node-ChanDir";
"node-ChanType":f3 -> "node-Expr";
"node-SliceExpr":f0 -> "node-Expr";
"node-SliceExpr":f2 -> "node-Expr";
"node-SliceExpr":f3 -> "node-Expr";
"node-SliceExpr":f4 -> "node-Expr";
"node-TypeAssertExpr":f0 -> "node-Expr";
"node-TypeAssertExpr":f2 -> "node-Expr";
"node-StarExpr":f1 -> "node-Expr";
"node-DeclStmt":f0 -> "node-Decl";
"node-DeferStmt":f1 -> "node-CallExpr";
"node-ReturnStmt":f1 -> "node-Expr";
"node-KeyValueExpr":f0 -> "node-Expr";
"node-KeyValueExpr":f2 -> "node-Expr";
"node-GoStmt":f1 -> "node-CallExpr";
"node-Package":f1 -> "node-Scope";
"node-Package":f2 -> "node-Object";
"node-Package":f3 -> "node-File";
"node-Scope":f0 -> "node-Scope";
"node-Scope":f1 -> "node-Object";
"node-Object":f0 -> "node-ObjKind";
"node-MapType":f1 -> "node-Expr";
"node-MapType":f2 -> "node-Expr";
"node-LabeledStmt":f0 -> "node-Ident";
"node-LabeledStmt":f2 -> "node-Stmt";
"node-IfStmt":f1 -> "node-Stmt";
"node-IfStmt":f2 -> "node-Expr";
"node-IfStmt":f3 -> "node-BlockStmt";
"node-IfStmt":f4 -> "node-Stmt";
"node-Spec":f0 -> "node-Node";
"node-ValueSpec":f0 -> "node-CommentGroup";
"node-ValueSpec":f1 -> "node-Ident";
"node-ValueSpec":f2 -> "node-Expr";
"node-ValueSpec":f3 -> "node-Expr";
"node-ValueSpec":f4 -> "node-CommentGroup";
"node-ArrayType":f1 -> "node-Expr";
"node-ArrayType":f2 -> "node-Expr";
"node-IncDecStmt":f0 -> "node-Expr";
}
subgraph "ast_test" {
label="ast_test";
}
}

