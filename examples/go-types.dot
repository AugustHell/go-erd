digraph "GoERD" { 
subgraph "types" {
label="types";
 "node-StdSizes" [shape=record,label="{StdSizes|<f0>WordSize\ int64|<f1>MaxAlign\ int64}"];
 "node-Func" [shape=record,label="{Func|<f0>object}"];
 "node-byUniqueName" [shape=rectangle,label="byUniqueName\ \[\]\*Selection"];
 "node-Signature" [shape=record,label="{Signature|<f0>scope\ \*Scope|<f1>recv\ \*Var|<f2>params\ \*Tuple|<f3>results\ \*Tuple|<f4>variadic\ bool}"];
 "node-declInfo" [shape=record,label="{declInfo|<f0>file\ \*Scope|<f1>lhs\ \[\]\*Var|<f2>typ\ ast.Expr|<f3>init\ ast.Expr|<f4>fdecl\ \*ast.FuncDecl|<f5>deps\ objSet}"];
 "node-nodeSet" [shape=rectangle,label="nodeSet\ map\[\*graphNode\]bool"];
 "node-Scope" [shape=record,label="{Scope|<f0>parent\ \*Scope|<f1>children\ \[\]\*Scope|<f2>elems\ map\[string\]Object|<f3>pos\,\ end\ token.Pos|<f4>comment\ string}"];
 "node-Nil" [shape=record,label="{Nil|<f0>object}"];
 "node-MethodSet" [shape=record,label="{MethodSet|<f0>list\ \[\]\*Selection}"];
 "node-builtinId" [shape=ellipse,label="builtinId\ int"];
 "node-PkgName" [shape=record,label="{PkgName|<f0>object|<f1>imported\ \*Package|<f2>used\ bool}"];
 "node-Label" [shape=record,label="{Label|<f0>object|<f1>used\ bool}"];
 "node-Struct" [shape=record,label="{Struct|<f0>fields\ \[\]\*Var|<f1>tags\ \[\]string}"];
 "node-funcInfo" [shape=record,label="{funcInfo|<f0>name\ string|<f1>decl\ \*declInfo|<f2>sig\ \*Signature|<f3>body\ \*ast.BlockStmt}"];
 "node-dependency" [shape=Mrecord,label="{dependency\ interface|<f0>Object|<f1>isDependency\ func\(\)}"];
 "node-byUniqueMethodName" [shape=rectangle,label="byUniqueMethodName\ \[\]\*Func"];
 "node-stmtContext" [shape=ellipse,label="stmtContext\ uint"];
 "node-Qualifier" [shape=rectangle,label="Qualifier\ func\(\*Package\)\ \(string\)"];
 "node-opPredicates" [shape=rectangle,label="opPredicates\ map\[token.Token\]func\(Type\)\ \(bool\)"];
 "node-Sizes" [shape=Mrecord,label="{Sizes\ interface|<f0>Alignof\ func\(Type\)\ \(int64\)|<f1>Offsetsof\ func\(\[\]\*Var\)\ \(\[\]int64\)|<f2>Sizeof\ func\(Type\)\ \(int64\)}"];
 "node-Initializer" [shape=record,label="{Initializer|<f0>Lhs\ \[\]\*Var|<f1>Rhs\ ast.Expr}"];
 "node-operand" [shape=record,label="{operand|<f0>mode\ operandMode|<f1>expr\ ast.Expr|<f2>typ\ Type|<f3>val\ constant.Value|<f4>id\ builtinId}"];
 "node-ImporterFrom" [shape=Mrecord,label="{ImporterFrom\ interface|<f0>Importer|<f1>ImportFrom\ func\(string\,ImportMode\)\ \(\*Package\,error\)}"];
 "node-Const" [shape=record,label="{Const|<f0>object|<f1>val\ constant.Value|<f2>visited\ bool}"];
 "node-ChanDir" [shape=ellipse,label="ChanDir\ int"];
 "node-BasicInfo" [shape=ellipse,label="BasicInfo\ int"];
 "node-Map" [shape=record,label="{Map|<f0>key\,\ elem\ Type}"];
 "node-Chan" [shape=record,label="{Chan|<f0>dir\ ChanDir|<f1>elem\ Type}"];
 "node-embeddedType" [shape=record,label="{embeddedType|<f0>typ\ \*Named|<f1>index\ \[\]int|<f2>indirect\ bool|<f3>multiples\ bool}"];
 "node-Info" [shape=record,label="{Info|<f0>Types\ map\[ast.Expr\]TypeAndValue|<f1>Defs\ map\[\*ast.Ident\]Object|<f2>Uses\ map\[\*ast.Ident\]Object|<f3>Implicits\ map\[ast.Node\]Object|<f4>Selections\ map\[\*ast.SelectorExpr\]\*Selection|<f5>Scopes\ map\[ast.Node\]\*Scope|<f6>InitOrder\ \[\]\*Initializer}"];
 "node-disabledAlias" [shape=record,label="{disabledAlias|<f0>object|<f1>orig\ Object|<f2>kind\ token.Token}"];
 "node-Error" [shape=record,label="{Error|<f0>Fset\ \*token.FileSet|<f1>Pos\ token.Pos|<f2>Msg\ string|<f3>Soft\ bool}"];
 "node-TypeAndValue" [shape=record,label="{TypeAndValue|<f0>mode\ operandMode|<f1>Type\ Type|<f2>Value\ constant.Value}"];
 "node-inSourceOrder" [shape=rectangle,label="inSourceOrder\ \[\]Object"];
 "node-graphNode" [shape=record,label="{graphNode|<f0>obj\ dependency|<f1>pred\,\ succ\ nodeSet|<f2>index\ int|<f3>ndeps\ int}"];
 "node-byUniqueTypeName" [shape=rectangle,label="byUniqueTypeName\ \[\]\*Named"];
 "node-methodSet" [shape=rectangle,label="methodSet\ map\[string\]\*Selection"];
 "node-Basic" [shape=record,label="{Basic|<f0>kind\ BasicKind|<f1>info\ BasicInfo|<f2>name\ string}"];
 "node-Array" [shape=record,label="{Array|<f0>len\ int64|<f1>elem\ Type}"];
 "node-Builtin" [shape=record,label="{Builtin|<f0>object|<f1>id\ builtinId}"];
 "node-SelectionKind" [shape=ellipse,label="SelectionKind\ int"];
 "node-Interface" [shape=record,label="{Interface|<f0>methods\ \[\]\*Func|<f1>embeddeds\ \[\]\*Named|<f2>allMethods\ \[\]\*Func}"];
 "node-objSet" [shape=rectangle,label="objSet\ map\[Object\]bool"];
 "node-nodeQueue" [shape=rectangle,label="nodeQueue\ \[\]\*graphNode"];
 "node-object" [shape=record,label="{object|<f0>parent\ \*Scope|<f1>pos\ token.Pos|<f2>pkg\ \*Package|<f3>name\ string|<f4>typ\ Type|<f5>order_\ uint32|<f6>scopePos_\ token.Pos}"];
 "node-fieldSet" [shape=rectangle,label="fieldSet\ map\[string\]\*Var"];
 "node-context" [shape=record,label="{context|<f0>decl\ \*declInfo|<f1>scope\ \*Scope|<f2>iota\ constant.Value|<f3>sig\ \*Signature|<f4>hasLabel\ bool|<f5>hasCallOrRecv\ bool}"];
 "node-Checker" [shape=record,label="{Checker|<f0>conf\ \*Config|<f1>fset\ \*token.FileSet|<f2>pkg\ \*Package|<f3>\*Info|<f4>objMap\ map\[Object\]\*declInfo|<f5>files\ \[\]\*ast.File|<f6>unusedDotImports\ map\[\*Scope\]map\[\*Package\]token.Pos|<f7>firstErr\ error|<f8>methods\ map\[string\]\[\]\*Func|<f9>untyped\ map\[ast.Expr\]exprInfo|<f10>funcs\ \[\]funcInfo|<f11>delayed\ \[\]func\(\)|<f12>context|<f13>pos\ token.Pos|<f14>indent\ int}"];
 "node-Package" [shape=record,label="{Package|<f0>path\ string|<f1>name\ string|<f2>scope\ \*Scope|<f3>complete\ bool|<f4>imports\ \[\]\*Package|<f5>fake\ bool}"];
 "node-Object" [shape=Mrecord,label="{Object\ interface|<f0>Parent\ func\(\)\ \(\*Scope\)|<f1>Pos\ func\(\)\ \(token.Pos\)|<f2>Pkg\ func\(\)\ \(\*Package\)|<f3>Name\ func\(\)\ \(string\)|<f4>Type\ func\(\)\ \(Type\)|<f5>Exported\ func\(\)\ \(bool\)|<f6>Id\ func\(\)\ \(string\)|<f7>String\ func\(\)\ \(string\)|<f8>order\ func\(\)\ \(uint32\)|<f9>setOrder\ func\(uint32\)|<f10>setParent\ func\(\*Scope\)|<f11>sameId\ func\(\*Package\,string\)\ \(bool\)|<f12>scopePos\ func\(\)\ \(token.Pos\)|<f13>setScopePos\ func\(token.Pos\)}"];
 "node-TypeName" [shape=record,label="{TypeName|<f0>object}"];
 "node-operandMode" [shape=ellipse,label="operandMode\ byte"];
 "node-Selection" [shape=record,label="{Selection|<f0>kind\ SelectionKind|<f1>recv\ Type|<f2>obj\ Object|<f3>index\ \[\]int|<f4>indirect\ bool}"];
 "node-Named" [shape=record,label="{Named|<f0>obj\ \*TypeName|<f1>underlying\ Type|<f2>methods\ \[\]\*Func}"];
 "node-exprInfo" [shape=record,label="{exprInfo|<f0>isLhs\ bool|<f1>mode\ operandMode|<f2>typ\ \*Basic|<f3>val\ constant.Value}"];
 "node-valueMap" [shape=rectangle,label="valueMap\ map\[interface\{\}\]\[\]valueType"];
 "node-ImportMode" [shape=ellipse,label="ImportMode\ int"];
 "node-Type" [shape=Mrecord,label="{Type\ interface|<f0>Underlying\ func\(\)\ \(Type\)|<f1>String\ func\(\)\ \(string\)}"];
 "node-BasicKind" [shape=ellipse,label="BasicKind\ int"];
 "node-Slice" [shape=record,label="{Slice|<f0>elem\ Type}"];
 "node-block" [shape=record,label="{block|<f0>parent\ \*block|<f1>lstmt\ \*ast.LabeledStmt|<f2>labels\ map\[string\]\*ast.LabeledStmt}"];
 "node-valueType" [shape=record,label="{valueType|<f0>pos\ token.Pos|<f1>typ\ Type}"];
 "node-Config" [shape=record,label="{Config|<f0>IgnoreFuncBodies\ bool|<f1>FakeImportC\ bool|<f2>Error\ func\(error\)|<f3>Importer\ Importer|<f4>Sizes\ Sizes|<f5>DisableUnusedImportCheck\ bool}"];
 "node-ifacePair" [shape=record,label="{ifacePair|<f0>x\,\ y\ \*Interface|<f1>prev\ \*ifacePair}"];
 "node-Var" [shape=record,label="{Var|<f0>object|<f1>anonymous\ bool|<f2>visited\ bool|<f3>isField\ bool|<f4>used\ bool}"];
 "node-objset" [shape=rectangle,label="objset\ map\[string\]Object"];
 "node-Tuple" [shape=record,label="{Tuple|<f0>vars\ \[\]\*Var}"];
 "node-Importer" [shape=Mrecord,label="{Importer\ interface|<f0>Import\ func\(string\)\ \(\*Package\,error\)}"];
 "node-Pointer" [shape=record,label="{Pointer|<f0>base\ Type}"];
 "node-bailout" [shape=record,label="{bailout|}"];
 "node-getter" [shape=rectangle,label="getter\ func\(\*operand\,int\)"];
 "node-exprKind" [shape=ellipse,label="exprKind\ int"];
"node-dependency":f0 -> "node-Object";
"node-PkgName":f0 -> "node-object";
"node-PkgName":f1 -> "node-Package";
"node-Label":f0 -> "node-object";
"node-Struct":f0 -> "node-Var";
"node-funcInfo":f1 -> "node-declInfo";
"node-funcInfo":f2 -> "node-Signature";
"node-Sizes":f0 -> "node-Type";
"node-Sizes":f1 -> "node-Var";
"node-Sizes":f2 -> "node-Type";
"node-Qualifier":f0 -> "node-Package";
"node-operand":f0 -> "node-operandMode";
"node-operand":f2 -> "node-Type";
"node-operand":f4 -> "node-builtinId";
"node-Initializer":f0 -> "node-Var";
"node-Const":f0 -> "node-object";
"node-ImporterFrom":f0 -> "node-Importer";
"node-ImporterFrom":f1 -> "node-ImportMode";
"node-ImporterFrom":f1 -> "node-Package";
"node-Info":f0 -> "node-TypeAndValue";
"node-Info":f1 -> "node-Object";
"node-Info":f2 -> "node-Object";
"node-Info":f3 -> "node-Object";
"node-Info":f4 -> "node-Selection";
"node-Info":f5 -> "node-Scope";
"node-Info":f6 -> "node-Initializer";
"node-disabledAlias":f0 -> "node-object";
"node-disabledAlias":f1 -> "node-Object";
"node-Map":f0 -> "node-Type";
"node-Chan":f0 -> "node-ChanDir";
"node-Chan":f1 -> "node-Type";
"node-embeddedType":f0 -> "node-Named";
"node-graphNode":f0 -> "node-dependency";
"node-graphNode":f1 -> "node-nodeSet";
"node-TypeAndValue":f0 -> "node-operandMode";
"node-TypeAndValue":f1 -> "node-Type";
"node-Basic":f0 -> "node-BasicKind";
"node-Basic":f1 -> "node-BasicInfo";
"node-Array":f1 -> "node-Type";
"node-object":f0 -> "node-Scope";
"node-object":f2 -> "node-Package";
"node-object":f4 -> "node-Type";
"node-Builtin":f0 -> "node-object";
"node-Builtin":f1 -> "node-builtinId";
"node-Interface":f0 -> "node-Func";
"node-Interface":f1 -> "node-Named";
"node-Interface":f2 -> "node-Func";
"node-Checker":f0 -> "node-Config";
"node-Checker":f2 -> "node-Package";
"node-Checker":f3 -> "node-Info";
"node-Checker":f4 -> "node-Object";
"node-Checker":f4 -> "node-declInfo";
"node-Checker":f6 -> "node-Scope";
"node-Checker":f6 -> "node-Package";
"node-Checker":f8 -> "node-Func";
"node-Checker":f9 -> "node-exprInfo";
"node-Checker":f10 -> "node-funcInfo";
"node-Checker":f12 -> "node-context";
"node-Package":f2 -> "node-Scope";
"node-Package":f4 -> "node-Package";
"node-context":f0 -> "node-declInfo";
"node-context":f1 -> "node-Scope";
"node-context":f3 -> "node-Signature";
"node-Object":f0 -> "node-Scope";
"node-Object":f2 -> "node-Package";
"node-Object":f4 -> "node-Type";
"node-Object":f10 -> "node-Scope";
"node-Object":f11 -> "node-Package";
"node-TypeName":f0 -> "node-object";
"node-Selection":f0 -> "node-SelectionKind";
"node-Selection":f1 -> "node-Type";
"node-Selection":f2 -> "node-Object";
"node-Named":f0 -> "node-TypeName";
"node-Named":f1 -> "node-Type";
"node-Named":f2 -> "node-Func";
"node-exprInfo":f1 -> "node-operandMode";
"node-exprInfo":f2 -> "node-Basic";
"node-valueType":f1 -> "node-Type";
"node-Config":f3 -> "node-Importer";
"node-Config":f4 -> "node-Sizes";
"node-Type":f0 -> "node-Type";
"node-Slice":f0 -> "node-Type";
"node-block":f0 -> "node-block";
"node-Var":f0 -> "node-object";
"node-ifacePair":f0 -> "node-Interface";
"node-ifacePair":f1 -> "node-ifacePair";
"node-Tuple":f0 -> "node-Var";
"node-getter":f0 -> "node-operand";
"node-Importer":f0 -> "node-Package";
"node-Pointer":f0 -> "node-Type";
"node-Scope":f0 -> "node-Scope";
"node-Scope":f1 -> "node-Scope";
"node-Scope":f2 -> "node-Object";
"node-Func":f0 -> "node-object";
"node-Signature":f0 -> "node-Scope";
"node-Signature":f1 -> "node-Var";
"node-Signature":f2 -> "node-Tuple";
"node-Signature":f3 -> "node-Tuple";
"node-declInfo":f0 -> "node-Scope";
"node-declInfo":f1 -> "node-Var";
"node-declInfo":f5 -> "node-objSet";
"node-MethodSet":f0 -> "node-Selection";
"node-Nil":f0 -> "node-object";
}
subgraph "types_test" {
label="types_test";
 "node-gen" [shape=record,label="{gen|<f0>bytes.Buffer}"];
 "node-resolveTestImporter" [shape=record,label="{resolveTestImporter|<f0>importer\ ImporterFrom|<f1>imported\ map\[string\]bool}"];
 "node-testImporter" [shape=rectangle,label="testImporter\ map\[string\]\*Package"];
 "node-testEntry" [shape=record,label="{testEntry|<f0>src\,\ str\ string}"];
}
subgraph "main" {
label="main";
 "node-parseResult" [shape=record,label="{parseResult|<f0>file\ \*ast.File|<f1>err\ error}"];
 "node-bailout" [shape=record,label="{bailout|}"];
}
}

