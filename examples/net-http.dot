digraph "GoERD" { 
subgraph "http_test" {
label="http_test";
 "node-lockedBytesBuffer" [shape=record,label="{lockedBytesBuffer|<f0>sync.Mutex|<f1>bytes.Buffer}"];
 "node-serveParam" [shape=record,label="{serveParam|<f0>name\ string|<f1>modtime\ time.Time|<f2>content\ io.ReadSeeker|<f3>contentType\ string|<f4>etag\ string}"];
 "node-rwTestConn" [shape=record,label="{rwTestConn|<f0>io.Reader|<f1>io.Writer|<f2>noopConn|<f3>closeFunc\ func\(\)\ \(error\)|<f4>closec\ chan\ bool}"];
 "node-h12Compare" [shape=record,label="{h12Compare|<f0>Handler\ func\(ResponseWriter\,\*Request\)|<f1>ReqFunc\ reqFunc|<f2>CheckResponse\ func\(string\,\*Response\)|<f3>EarlyCheckResponse\ func\(string\,\*Response\)|<f4>Opts\ \[\]interface\{\}}"];
 "node-countCloseReader" [shape=record,label="{countCloseReader|<f0>n\ \*int|<f1>io.Reader}"];
 "node-neverEnding" [shape=ellipse,label="neverEnding\ byte"];
 "node-serverExpectTest" [shape=record,label="{serverExpectTest|<f0>contentLength\ int|<f1>chunked\ bool|<f2>expectation\ string|<f3>readBody\ bool|<f4>expectedResponse\ string}"];
 "node-redirectTest" [shape=record,label="{redirectTest|<f0>suffix\ string|<f1>want\ int|<f2>redirectBody\ string}"];
 "node-issue12991FS" [shape=record,label="{issue12991FS|}"];
 "node-testCloseConn" [shape=record,label="{testCloseConn|<f0>net.Conn|<f1>set\ \*testConnSet}"];
 "node-apiHandler" [shape=record,label="{apiHandler|}"];
 "node-parseContentTypeTest" [shape=record,label="{parseContentTypeTest|<f0>shouldError\ bool|<f1>contentType\ stringMap}"];
 "node-oneConnListener" [shape=record,label="{oneConnListener|<f0>conn\ net.Conn}"];
 "node-issue18239Body" [shape=record,label="{issue18239Body|<f0>readCalls\ \*int32|<f1>closeCalls\ \*int32|<f2>readErr\ error}"];
 "node-errorReader" [shape=record,label="{errorReader|<f0>err\ error}"];
 "node-stringWriter" [shape=Mrecord,label="{stringWriter\ interface|<f0>WriteString\ func\(string\)\ \(int\,error\)}"];
 "node-chanWriter" [shape=box,label="chanWriter\ chan\ string"];
 "node-eofReaderFunc" [shape=rectangle,label="eofReaderFunc\ func\(\)"];
 "node-panicOnSeek" [shape=record,label="{panicOnSeek|<f0>io.ReadSeeker}"];
 "node-dummyAddr" [shape=ellipse,label="dummyAddr\ string"];
 "node-countReader" [shape=record,label="{countReader|<f0>r\ io.Reader|<f1>n\ \*int64}"];
 "node-recordingTransport" [shape=record,label="{recordingTransport|<f0>req\ \*Request}"];
 "node-logWritesConn" [shape=record,label="{logWritesConn|<f0>net.Conn|<f1>w\ io.Writer|<f2>rch\ chan\ io.Reader|<f3>r\ io.Reader|<f4>mu\ sync.Mutex|<f5>writes\ \[\]string}"];
 "node-logWrites" [shape=record,label="{logWrites|<f0>t\ \*testing.T|<f1>dst\ \*\[\]string}"];
 "node-testHandlerBodyConsumer" [shape=record,label="{testHandlerBodyConsumer|<f0>name\ string|<f1>f\ func\(io.ReadCloser\)}"];
 "node-testFileSystem" [shape=record,label="{testFileSystem|<f0>open\ func\(string\)\ \(File\,error\)}"];
 "node-fakeFile" [shape=record,label="{fakeFile|<f0>io.ReadSeeker|<f1>fi\ \*fakeFileInfo|<f2>path\ string|<f3>entpos\ int}"];
 "node-writerFuncConn" [shape=record,label="{writerFuncConn|<f0>net.Conn|<f1>write\ func\(\[\]byte\)\ \(int\,error\)}"];
 "node-testConn" [shape=record,label="{testConn|<f0>readMu\ sync.Mutex|<f1>readBuf\ bytes.Buffer|<f2>writeBuf\ bytes.Buffer|<f3>closec\ chan\ bool|<f4>noopConn}"];
 "node-trackLastConnListener" [shape=record,label="{trackLastConnListener|<f0>net.Listener|<f1>last\ \*net.Conn}"];
 "node-reqFunc" [shape=rectangle,label="reqFunc\ func\(\*Client\,string\)\ \(\*Response\,error\)"];
 "node-slurpResult" [shape=record,label="{slurpResult|<f0>io.ReadCloser|<f1>body\ \[\]byte|<f2>err\ error}"];
 "node-fakeFileInfo" [shape=record,label="{fakeFileInfo|<f0>dir\ bool|<f1>basename\ string|<f2>modtime\ time.Time|<f3>ents\ \[\]\*fakeFileInfo|<f4>contents\ string|<f5>err\ error}"];
 "node-byteFromChanReader" [shape=box,label="byteFromChanReader\ chan\ byte"];
 "node-handlerTest" [shape=record,label="{handlerTest|<f0>handler\ Handler}"];
 "node-noteCloseConn" [shape=record,label="{noteCloseConn|<f0>net.Conn|<f1>closeFunc\ func\(\)}"];
 "node-stringMap" [shape=rectangle,label="stringMap\ map\[string\]\[\]string"];
 "node-version" [shape=record,label="{version|<f0>major\,\ minor\ int|<f1>ok\ bool}"];
 "node-handlerBodyCloseTest" [shape=record,label="{handlerBodyCloseTest|<f0>bodySize\ int|<f1>bodyChunked\ bool|<f2>reqConnClose\ bool|<f3>wantEOFSearch\ bool|<f4>wantNextReq\ bool}"];
 "node-terrorWriter" [shape=record,label="{terrorWriter|<f0>t\ \*testing.T}"];
 "node-closeWriteTestConn" [shape=record,label="{closeWriteTestConn|<f0>rwTestConn|<f1>didCloseWrite\ bool}"];
 "node-testCase" [shape=record,label="{testCase|<f0>file\ string|<f1>content\ io.ReadSeeker|<f2>modtime\ time.Time|<f3>serveETag\ string|<f4>serveContentType\ string|<f5>reqHeader\ map\[string\]string|<f6>wantLastMod\ string|<f7>wantContentType\ string|<f8>wantContentRange\ string|<f9>wantStatus\ int}"];
 "node-infiniteReader" [shape=record,label="{infiniteReader|<f0>buf\ \[\]byte|<f1>offset\ int}"];
 "node-blockingRemoteAddrConn" [shape=record,label="{blockingRemoteAddrConn|<f0>net.Conn|<f1>addrs\ chan\ net.Addr}"];
 "node-responseWriterJustWriter" [shape=record,label="{responseWriterJustWriter|<f0>io.Writer}"];
 "node-slowTestConn" [shape=record,label="{slowTestConn|<f0>script\ \[\]interface\{\}|<f1>closec\ chan\ bool|<f2>mu\ sync.Mutex|<f3>rd\,\ wd\ time.Time|<f4>noopConn}"];
 "node-writeCountingConn" [shape=record,label="{writeCountingConn|<f0>net.Conn|<f1>count\ \*int}"];
 "node-issue15577Tripper" [shape=record,label="{issue15577Tripper|}"];
 "node-wantRange" [shape=record,label="{wantRange|<f0>start\,\ end\ int64}"];
 "node-fileServerCleanPathDir" [shape=record,label="{fileServerCleanPathDir|<f0>log\ \*\[\]string}"];
 "node-fooProto" [shape=record,label="{fooProto|}"];
 "node-basicAuthCredentialsTest" [shape=record,label="{basicAuthCredentialsTest|<f0>username\,\ password\ string}"];
 "node-clientServerTest" [shape=record,label="{clientServerTest|<f0>t\ \*testing.T|<f1>h2\ bool|<f2>h\ Handler|<f3>ts\ \*httptest.Server|<f4>tr\ \*Transport|<f5>c\ \*Client}"];
 "node-funcRoundTripper" [shape=rectangle,label="funcRoundTripper\ func\(\)"];
 "node-delayedEOFReader" [shape=record,label="{delayedEOFReader|<f0>r\ io.Reader}"];
 "node-blockingRemoteAddrListener" [shape=record,label="{blockingRemoteAddrListener|<f0>net.Listener|<f1>conns\ chan\ net.Conn}"];
 "node-RecordingJar" [shape=record,label="{RecordingJar|<f0>mu\ sync.Mutex|<f1>log\ bytes.Buffer}"];
 "node-issue12991File" [shape=record,label="{issue12991File|<f0>File}"];
 "node-http09Writer" [shape=record,label="{http09Writer|<f0>io.Writer|<f1>h\ Header}"];
 "node-proxyFromEnvTest" [shape=record,label="{proxyFromEnvTest|<f0>req\ string|<f1>env\ string|<f2>httpsenv\ string|<f3>noenv\ string|<f4>reqmeth\ string|<f5>want\ string|<f6>wanterr\ error}"];
 "node-funcConn" [shape=record,label="{funcConn|<f0>net.Conn|<f1>read\ func\(\[\]byte\)\ \(int\,error\)|<f2>write\ func\(\[\]byte\)\ \(int\,error\)}"];
 "node-data" [shape=record,label="{data|<f0>Addr\ string}"];
 "node-TestJar" [shape=record,label="{TestJar|<f0>m\ sync.Mutex|<f1>perURL\ map\[string\]\[\]\*Cookie}"];
 "node-testConnSet" [shape=record,label="{testConnSet|<f0>t\ \*testing.T|<f1>mu\ sync.Mutex|<f2>closed\ map\[net.Conn\]bool|<f3>list\ \[\]net.Conn}"];
 "node-closerFunc" [shape=rectangle,label="closerFunc\ func\(\)\ \(error\)"];
 "node-noopConn" [shape=record,label="{noopConn|}"];
 "node-stringHandler" [shape=ellipse,label="stringHandler\ string"];
 "node-repeatReader" [shape=record,label="{repeatReader|<f0>content\ \[\]byte|<f1>count\ int|<f2>off\ int}"];
 "node-testErrorReader" [shape=record,label="{testErrorReader|<f0>t\ \*testing.T}"];
 "node-fakeFS" [shape=rectangle,label="fakeFS\ map\[string\]\*fakeFileInfo"];
 "node-getBasicAuthTest" [shape=record,label="{getBasicAuthTest|<f0>username\,\ password\ string|<f1>ok\ bool}"];
 "node-errorListener" [shape=record,label="{errorListener|<f0>errs\ \[\]error}"];
"node-closeWriteTestConn":f0 -> "node-rwTestConn";
"node-slowTestConn":f4 -> "node-noopConn";
"node-rwTestConn":f2 -> "node-noopConn";
"node-h12Compare":f1 -> "node-reqFunc";
"node-parseContentTypeTest":f1 -> "node-stringMap";
"node-testCloseConn":f1 -> "node-testConnSet";
"node-testConn":f4 -> "node-noopConn";
"node-fakeFile":f1 -> "node-fakeFileInfo";
"node-fakeFileInfo":f3 -> "node-fakeFileInfo";
}
subgraph "main" {
label="main";
 "node-Counter" [shape=record,label="{Counter|<f0>mu\ sync.Mutex|<f1>n\ int}"];
 "node-Chan" [shape=box,label="Chan\ chan\ int"];
}
subgraph "http" {
label="http";
 "node-http2writeFramer" [shape=Mrecord,label="{http2writeFramer\ interface|<f0>writeFrame\ func\(http2writeContext\)\ \(error\)|<f1>staysWithinBuffer\ func\(int\)\ \(bool\)}"];
 "node-exactSig" [shape=record,label="{exactSig|<f0>sig\ \[\]byte|<f1>ct\ string}"];
 "node-connectMethodKey" [shape=record,label="{connectMethodKey|<f0>proxy\,\ scheme\,\ addr\ string}"];
 "node-httpRange" [shape=record,label="{httpRange|<f0>start\,\ length\ int64}"];
 "node-http2ClientConn" [shape=record,label="{http2ClientConn|<f0>t\ \*http2Transport|<f1>tconn\ net.Conn|<f2>tlsState\ \*tls.ConnectionState|<f3>singleUse\ bool|<f4>readerDone\ chan\ struct\ \{\}|<f5>readerErr\ error|<f6>idleTimeout\ time.Duration|<f7>idleTimer\ \*time.Timer|<f8>mu\ sync.Mutex|<f9>cond\ \*sync.Cond|<f10>flow\ http2flow|<f11>inflow\ http2flow|<f12>closed\ bool|<f13>wantSettingsAck\ bool|<f14>goAway\ \*http2GoAwayFrame|<f15>goAwayDebug\ string|<f16>streams\ map\[uint32\]\*http2clientStream|<f17>nextStreamID\ uint32|<f18>pings\ map\[\[\]byte\]chan\ struct\ \{\}|<f19>bw\ \*bufio.Writer|<f20>br\ \*bufio.Reader|<f21>fr\ \*http2Framer|<f22>lastActive\ time.Time|<f23>maxFrameSize\ uint32|<f24>maxConcurrentStreams\ uint32|<f25>initialWindowSize\ uint32|<f26>hbuf\ bytes.Buffer|<f27>henc\ \*hpack.Encoder|<f28>freeBuf\ \[\]\[\]byte|<f29>wmu\ sync.Mutex|<f30>werr\ error}"];
 "node-http2writeContext" [shape=Mrecord,label="{http2writeContext\ interface|<f0>Framer\ func\(\)\ \(\*http2Framer\)|<f1>Flush\ func\(\)\ \(error\)|<f2>CloseConn\ func\(\)\ \(error\)|<f3>HeaderEncoder\ func\(\)\ \(\*hpack.Encoder\,\*bytes.Buffer\)}"];
 "node-http2writeSettings" [shape=rectangle,label="http2writeSettings\ \[\]http2Setting"];
 "node-http2sortPriorityNodeSiblings" [shape=rectangle,label="http2sortPriorityNodeSiblings\ \[\]\*http2priorityNode"];
 "node-stringWriter" [shape=record,label="{stringWriter|<f0>w\ io.Writer}"];
 "node-contextKey" [shape=record,label="{contextKey|<f0>name\ string}"];
 "node-http2DataFrame" [shape=record,label="{http2DataFrame|<f0>http2FrameHeader|<f1>data\ \[\]byte}"];
 "node-CookieJar" [shape=Mrecord,label="{CookieJar\ interface|<f0>SetCookies\ func\(\*url.URL\,\[\]\*Cookie\)|<f1>Cookies\ func\(\*url.URL\)\ \(\[\]\*Cookie\)}"];
 "node-dialRes" [shape=record,label="{dialRes|<f0>pc\ \*persistConn|<f1>err\ error}"];
 "node-http2StreamError" [shape=record,label="{http2StreamError|<f0>StreamID\ uint32|<f1>Code\ http2ErrCode|<f2>Cause\ error}"];
 "node-tlsHandshakeTimeoutError" [shape=record,label="{tlsHandshakeTimeoutError|}"];
 "node-http2writeResHeaders" [shape=record,label="{http2writeResHeaders|<f0>streamID\ uint32|<f1>httpResCode\ int|<f2>h\ Header|<f3>trailers\ \[\]string|<f4>endStream\ bool|<f5>date\ string|<f6>contentType\ string|<f7>contentLength\ string}"];
 "node-ServeMux" [shape=record,label="{ServeMux|<f0>mu\ sync.RWMutex|<f1>m\ map\[string\]muxEntry|<f2>hosts\ bool}"];
 "node-transferReader" [shape=record,label="{transferReader|<f0>Header\ Header|<f1>StatusCode\ int|<f2>RequestMethod\ string|<f3>ProtoMajor\ int|<f4>ProtoMinor\ int|<f5>Body\ io.ReadCloser|<f6>ContentLength\ int64|<f7>TransferEncoding\ \[\]string|<f8>Close\ bool|<f9>Trailer\ Header}"];
 "node-ProtocolError" [shape=record,label="{ProtocolError|<f0>ErrorString\ string}"];
 "node-respTest" [shape=record,label="{respTest|<f0>Raw\ string|<f1>Resp\ Response|<f2>Body\ string}"];
 "node-fakeLocker" [shape=record,label="{fakeLocker|}"];
 "node-noBody" [shape=record,label="{noBody|}"];
 "node-http2transportResponseBody" [shape=record,label="{http2transportResponseBody|<f0>cs\ \*http2clientStream}"];
 "node-badStringError" [shape=record,label="{badStringError|<f0>what\ string|<f1>str\ string}"];
 "node-keyValues" [shape=record,label="{keyValues|<f0>key\ string|<f1>values\ \[\]string}"];
 "node-http2UnknownFrame" [shape=record,label="{http2UnknownFrame|<f0>http2FrameHeader|<f1>p\ \[\]byte}"];
 "node-writerFunc" [shape=rectangle,label="writerFunc\ func\(\[\]byte\)\ \(int\,error\)"];
 "node-http2goAwayFlowError" [shape=record,label="{http2goAwayFlowError|}"];
 "node-http2bodyReadMsg" [shape=record,label="{http2bodyReadMsg|<f0>st\ \*http2stream|<f1>n\ int}"];
 "node-http2GoAwayError" [shape=record,label="{http2GoAwayError|<f0>LastStreamID\ uint32|<f1>ErrCode\ http2ErrCode|<f2>DebugData\ string}"];
 "node-mp4Sig" [shape=record,label="{mp4Sig|}"];
 "node-http2FrameType" [shape=ellipse,label="http2FrameType\ uint8"];
 "node-http2SettingID" [shape=ellipse,label="http2SettingID\ uint16"];
 "node-http2errorReader" [shape=record,label="{http2errorReader|<f0>err\ error}"];
 "node-sniffSig" [shape=Mrecord,label="{sniffSig\ interface|<f0>match\ func\(\[\]byte\,int\)\ \(string\)}"];
 "node-http2headerFieldValueError" [shape=ellipse,label="http2headerFieldValueError\ string"];
 "node-Request" [shape=record,label="{Request|<f0>Method\ string|<f1>URL\ \*url.URL|<f2>Proto\ string|<f3>ProtoMajor\ int|<f4>ProtoMinor\ int|<f5>Header\ Header|<f6>Body\ io.ReadCloser|<f7>GetBody\ func\(\)\ \(io.ReadCloser\,error\)|<f8>ContentLength\ int64|<f9>TransferEncoding\ \[\]string|<f10>Close\ bool|<f11>Host\ string|<f12>Form\ url.Values|<f13>PostForm\ url.Values|<f14>MultipartForm\ \*multipart.Form|<f15>Trailer\ Header|<f16>RemoteAddr\ string|<f17>RequestURI\ string|<f18>TLS\ \*tls.ConnectionState|<f19>Cancel\ chan\ struct\ \{\}|<f20>Response\ \*Response|<f21>ctx\ context.Context}"];
 "node-FileSystem" [shape=Mrecord,label="{FileSystem\ interface|<f0>Open\ func\(string\)\ \(File\,error\)}"];
 "node-http2PriorityParam" [shape=record,label="{http2PriorityParam|<f0>StreamDep\ uint32|<f1>Exclusive\ bool|<f2>Weight\ uint8}"];
 "node-http2headersOrContinuation" [shape=Mrecord,label="{http2headersOrContinuation\ interface|<f0>http2headersEnder|<f1>HeaderBlockFragment\ func\(\)\ \(\[\]byte\)}"];
 "node-writerOnly" [shape=record,label="{writerOnly|<f0>io.Writer}"];
 "node-Pusher" [shape=Mrecord,label="{Pusher\ interface|<f0>Push\ func\(string\,\*PushOptions\)\ \(error\)}"];
 "node-http2FrameWriteRequest" [shape=record,label="{http2FrameWriteRequest|<f0>write\ http2writeFramer|<f1>stream\ \*http2stream|<f2>done\ chan\ error}"];
 "node-writeRequest" [shape=record,label="{writeRequest|<f0>req\ \*transportRequest|<f1>ch\ chan\ error|<f2>continueCh\ chan\ struct\ \{\}}"];
 "node-Cookie" [shape=record,label="{Cookie|<f0>Name\ string|<f1>Value\ string|<f2>Path\ string|<f3>Domain\ string|<f4>Expires\ time.Time|<f5>RawExpires\ string|<f6>MaxAge\ int|<f7>Secure\ bool|<f8>HttpOnly\ bool|<f9>Raw\ string|<f10>Unparsed\ \[\]string}"];
 "node-http2noDialH2RoundTripper" [shape=record,label="{http2noDialH2RoundTripper|<f0>t\ \*http2Transport}"];
 "node-http2pushOptions" [shape=record,label="{http2pushOptions|<f0>Method\ string|<f1>Header\ Header}"];
 "node-http2writeQueuePool" [shape=rectangle,label="http2writeQueuePool\ \[\]\*http2writeQueue"];
 "node-Flusher" [shape=Mrecord,label="{Flusher\ interface|<f0>Flush\ func\(\)}"];
 "node-muxEntry" [shape=record,label="{muxEntry|<f0>explicit\ bool|<f1>h\ Handler|<f2>pattern\ string}"];
 "node-readerAndCloser" [shape=record,label="{readerAndCloser|<f0>io.Reader|<f1>io.Closer}"];
 "node-http2writeSettingsAck" [shape=record,label="{http2writeSettingsAck|}"];
 "node-reqTest" [shape=record,label="{reqTest|<f0>Raw\ string|<f1>Req\ \*Request|<f2>Body\ string|<f3>Trailer\ Header|<f4>Error\ string}"];
 "node-http2priorityWriteScheduler" [shape=record,label="{http2priorityWriteScheduler|<f0>root\ http2priorityNode|<f1>nodes\ map\[uint32\]\*http2priorityNode|<f2>maxID\ uint32|<f3>closedNodes\,\ idleNodes\ \[\]\*http2priorityNode|<f4>maxClosedNodesInTree\ int|<f5>maxIdleNodesInTree\ int|<f6>writeThrottleLimit\ int32|<f7>enableWriteThrottle\ bool|<f8>tmp\ \[\]\*http2priorityNode|<f9>queuePool\ http2writeQueuePool}"];
 "node-atomicBool" [shape=ellipse,label="atomicBool\ int32"];
 "node-File" [shape=Mrecord,label="{File\ interface|<f0>io.Closer|<f1>io.Reader|<f2>io.Seeker|<f3>Readdir\ func\(int\)\ \(\[\]os.FileInfo\,error\)|<f4>Stat\ func\(\)\ \(os.FileInfo\,error\)}"];
 "node-http2PingFrame" [shape=record,label="{http2PingFrame|<f0>http2FrameHeader|<f1>Data\ \[\]byte}"];
 "node-http2OpenStreamOptions" [shape=record,label="{http2OpenStreamOptions|<f0>PusherID\ uint32}"];
 "node-initNPNRequest" [shape=record,label="{initNPNRequest|<f0>c\ \*tls.Conn|<f1>h\ serverHandler}"];
 "node-headerOnlyResponseWriter" [shape=ellipse,label="headerOnlyResponseWriter\ Header"];
 "node-countingWriter" [shape=ellipse,label="countingWriter\ int64"];
 "node-reqWriteTest" [shape=record,label="{reqWriteTest|<f0>Req\ Request|<f1>Body\ interface\{\}|<f2>WantWrite\ string|<f3>WantProxy\ string|<f4>WantError\ error}"];
 "node-http2contextContext" [shape=Mrecord,label="{http2contextContext\ interface|<f0>context.Context}"];
 "node-respWriteTest" [shape=record,label="{respWriteTest|<f0>Resp\ Response|<f1>Raw\ string}"];
 "node-http2RSTStreamFrame" [shape=record,label="{http2RSTStreamFrame|<f0>http2FrameHeader|<f1>ErrCode\ http2ErrCode}"];
 "node-conn" [shape=record,label="{conn|<f0>server\ \*Server|<f1>cancelCtx\ context.CancelFunc|<f2>rwc\ net.Conn|<f3>remoteAddr\ string|<f4>tlsState\ \*tls.ConnectionState|<f5>werr\ error|<f6>r\ \*connReader|<f7>bufr\ \*bufio.Reader|<f8>bufw\ \*bufio.Writer|<f9>lastMethod\ string|<f10>curReq\ atomic.Value|<f11>curState\ atomic.Value|<f12>mu\ sync.Mutex|<f13>hijackedv\ bool}"];
 "node-http2GoAwayFrame" [shape=record,label="{http2GoAwayFrame|<f0>http2FrameHeader|<f1>LastStreamID\ uint32|<f2>ErrCode\ http2ErrCode|<f3>debugData\ \[\]byte}"];
 "node-http2bufferedWriter" [shape=record,label="{http2bufferedWriter|<f0>w\ io.Writer|<f1>bw\ \*bufio.Writer}"];
 "node-http2RoundTripOpt" [shape=record,label="{http2RoundTripOpt|<f0>OnlyCachedConn\ bool}"];
 "node-http2readFrameResult" [shape=record,label="{http2readFrameResult|<f0>f\ http2Frame|<f1>err\ error|<f2>readMore\ func\(\)}"];
 "node-http2requestBody" [shape=record,label="{http2requestBody|<f0>stream\ \*http2stream|<f1>conn\ \*http2serverConn|<f2>closed\ bool|<f3>sawEOF\ bool|<f4>pipe\ \*http2pipe|<f5>needsContinue\ bool}"];
 "node-testCase" [shape=record,label="{testCase|<f0>method\ string|<f1>clen\ int64|<f2>body\ io.ReadCloser|<f3>want\ func\(string\)\ \(error\)|<f4>init\ func\(\*testCase\)|<f5>afterReqRead\ func\(\)}"];
 "node-Response" [shape=record,label="{Response|<f0>Status\ string|<f1>StatusCode\ int|<f2>Proto\ string|<f3>ProtoMajor\ int|<f4>ProtoMinor\ int|<f5>Header\ Header|<f6>Body\ io.ReadCloser|<f7>ContentLength\ int64|<f8>TransferEncoding\ \[\]string|<f9>Close\ bool|<f10>Uncompressed\ bool|<f11>Trailer\ Header|<f12>Request\ \*Request|<f13>TLS\ \*tls.ConnectionState}"];
 "node-PushOptions" [shape=record,label="{PushOptions|<f0>Method\ string|<f1>Header\ Header}"];
 "node-http2pipe" [shape=record,label="{http2pipe|<f0>mu\ sync.Mutex|<f1>c\ sync.Cond|<f2>b\ http2pipeBuffer|<f3>err\ error|<f4>breakErr\ error|<f5>donec\ chan\ struct\ \{\}|<f6>readFn\ func\(\)}"];
 "node-hasTokenTest" [shape=record,label="{hasTokenTest|<f0>header\ string|<f1>token\ string|<f2>want\ bool}"];
 "node-requestTooLarger" [shape=Mrecord,label="{requestTooLarger\ interface|<f0>requestTooLarge\ func\(\)}"];
 "node-response" [shape=record,label="{response|<f0>conn\ \*conn|<f1>req\ \*Request|<f2>reqBody\ io.ReadCloser|<f3>cancelCtx\ context.CancelFunc|<f4>wroteHeader\ bool|<f5>wroteContinue\ bool|<f6>wants10KeepAlive\ bool|<f7>wantsClose\ bool|<f8>w\ \*bufio.Writer|<f9>cw\ chunkWriter|<f10>handlerHeader\ Header|<f11>calledHeader\ bool|<f12>written\ int64|<f13>contentLength\ int64|<f14>status\ int|<f15>closeAfterReply\ bool|<f16>requestBodyLimitHit\ bool|<f17>trailers\ \[\]string|<f18>handlerDone\ atomicBool|<f19>dateBuf\ \[\]byte|<f20>clenBuf\ \[\]byte|<f21>closeNotifyCh\ chan\ bool|<f22>didCloseNotify\ int32}"];
 "node-envOnce" [shape=record,label="{envOnce|<f0>names\ \[\]string|<f1>once\ sync.Once|<f2>val\ string}"];
 "node-dumpConn" [shape=record,label="{dumpConn|<f0>io.Writer|<f1>io.Reader}"];
 "node-http2ClientConnPool" [shape=Mrecord,label="{http2ClientConnPool\ interface|<f0>GetClientConn\ func\(\*Request\,string\)\ \(\*http2ClientConn\,error\)|<f1>MarkDead\ func\(\*http2ClientConn\)}"];
 "node-http2ErrCode" [shape=ellipse,label="http2ErrCode\ uint32"];
 "node-http2fixedBuffer" [shape=record,label="{http2fixedBuffer|<f0>buf\ \[\]byte|<f1>r\,\ w\ int}"];
 "node-http2Server" [shape=record,label="{http2Server|<f0>MaxHandlers\ int|<f1>MaxConcurrentStreams\ uint32|<f2>MaxReadFrameSize\ uint32|<f3>PermitProhibitedCipherSuites\ bool|<f4>IdleTimeout\ time.Duration|<f5>NewWriteScheduler\ func\(\)\ \(http2WriteScheduler\)}"];
 "node-http2ServeConnOpts" [shape=record,label="{http2ServeConnOpts|<f0>BaseConfig\ \*Server|<f1>Handler\ Handler}"];
 "node-http2stringWriter" [shape=Mrecord,label="{http2stringWriter\ interface|<f0>WriteString\ func\(string\)\ \(int\,error\)}"];
 "node-connReader" [shape=record,label="{connReader|<f0>conn\ \*conn|<f1>mu\ sync.Mutex|<f2>hasByte\ bool|<f3>byteBuf\ \[\]byte|<f4>bgErr\ error|<f5>cond\ \*sync.Cond|<f6>inRead\ bool|<f7>aborted\ bool|<f8>remain\ int64}"];
 "node-http2writeQueue" [shape=record,label="{http2writeQueue|<f0>s\ \[\]http2FrameWriteRequest}"];
 "node-http2randomWriteScheduler" [shape=record,label="{http2randomWriteScheduler|<f0>zero\ http2writeQueue|<f1>sq\ map\[uint32\]\*http2writeQueue|<f2>queuePool\ http2writeQueuePool}"];
 "node-http2connError" [shape=record,label="{http2connError|<f0>Code\ http2ErrCode|<f1>Reason\ string}"];
 "node-http2HeadersFrameParam" [shape=record,label="{http2HeadersFrameParam|<f0>StreamID\ uint32|<f1>BlockFragment\ \[\]byte|<f2>EndStream\ bool|<f3>EndHeaders\ bool|<f4>PadLength\ uint8|<f5>Priority\ http2PriorityParam}"];
 "node-CloseNotifier" [shape=Mrecord,label="{CloseNotifier\ interface|<f0>CloseNotify\ func\(\)\ \(chan\ bool\)}"];
 "node-ConnState" [shape=ellipse,label="ConnState\ int"];
 "node-Header" [shape=rectangle,label="Header\ map\[string\]\[\]string"];
 "node-http2flow" [shape=record,label="{http2flow|<f0>n\ int32|<f1>conn\ \*http2flow}"];
 "node-http2clientTrace" [shape=ellipse,label="http2clientTrace\ httptrace.ClientTrace"];
 "node-http2responseWriterState" [shape=record,label="{http2responseWriterState|<f0>stream\ \*http2stream|<f1>req\ \*Request|<f2>body\ \*http2requestBody|<f3>conn\ \*http2serverConn|<f4>bw\ \*bufio.Writer|<f5>handlerHeader\ Header|<f6>snapHeader\ Header|<f7>trailers\ \[\]string|<f8>status\ int|<f9>wroteHeader\ bool|<f10>sentHeader\ bool|<f11>handlerDone\ bool|<f12>sentContentLen\ int64|<f13>wroteBytes\ int64|<f14>closeNotifierMu\ sync.Mutex|<f15>closeNotifierCh\ chan\ bool}"];
 "node-persistConn" [shape=record,label="{persistConn|<f0>alt\ RoundTripper|<f1>t\ \*Transport|<f2>cacheKey\ connectMethodKey|<f3>conn\ net.Conn|<f4>tlsState\ \*tls.ConnectionState|<f5>br\ \*bufio.Reader|<f6>bw\ \*bufio.Writer|<f7>nwrite\ int64|<f8>reqch\ chan\ requestAndChan|<f9>writech\ chan\ writeRequest|<f10>closech\ chan\ struct\ \{\}|<f11>isProxy\ bool|<f12>sawEOF\ bool|<f13>readLimit\ int64|<f14>writeErrCh\ chan\ error|<f15>writeLoopDone\ chan\ struct\ \{\}|<f16>idleAt\ time.Time|<f17>idleTimer\ \*time.Timer|<f18>mu\ sync.Mutex|<f19>numExpectedResponses\ int|<f20>closed\ error|<f21>canceledErr\ error|<f22>broken\ bool|<f23>reused\ bool|<f24>mutateHeaderFunc\ func\(Header\)}"];
 "node-http2ConnectionError" [shape=ellipse,label="http2ConnectionError\ http2ErrCode"];
 "node-timeoutWriter" [shape=record,label="{timeoutWriter|<f0>w\ ResponseWriter|<f1>h\ Header|<f2>wbuf\ bytes.Buffer|<f3>mu\ sync.Mutex|<f4>timedOut\ bool|<f5>wroteHeader\ bool|<f6>code\ int}"];
 "node-http2Flags" [shape=ellipse,label="http2Flags\ uint8"];
 "node-http2closeWaiter" [shape=box,label="http2closeWaiter\ chan\ struct\ \{\}"];
 "node-http2erringRoundTripper" [shape=record,label="{http2erringRoundTripper|<f0>err\ error}"];
 "node-badRequestError" [shape=ellipse,label="badRequestError\ string"];
 "node-checkConnErrorWriter" [shape=record,label="{checkConnErrorWriter|<f0>c\ \*conn}"];
 "node-http2FrameHeader" [shape=record,label="{http2FrameHeader|<f0>valid\ bool|<f1>Type\ http2FrameType|<f2>Flags\ http2Flags|<f3>Length\ uint32|<f4>StreamID\ uint32}"];
 "node-transportReadFromServerError" [shape=record,label="{transportReadFromServerError|<f0>err\ error}"];
 "node-connLRU" [shape=record,label="{connLRU|<f0>ll\ \*list.List|<f1>m\ map\[\*persistConn\]\*list.Element}"];
 "node-fileHandler" [shape=record,label="{fileHandler|<f0>root\ FileSystem}"];
 "node-http2PushPromiseParam" [shape=record,label="{http2PushPromiseParam|<f0>StreamID\ uint32|<f1>PromiseID\ uint32|<f2>BlockFragment\ \[\]byte|<f3>EndHeaders\ bool|<f4>PadLength\ uint8}"];
 "node-http2streamEnder" [shape=Mrecord,label="{http2streamEnder\ interface|<f0>StreamEnded\ func\(\)\ \(bool\)}"];
 "node-http2write100ContinueHeadersFrame" [shape=record,label="{http2write100ContinueHeadersFrame|<f0>streamID\ uint32}"];
 "node-http2PriorityFrame" [shape=record,label="{http2PriorityFrame|<f0>http2FrameHeader|<f1>http2PriorityParam}"];
 "node-http2frameWriteResult" [shape=record,label="{http2frameWriteResult|<f0>wr\ http2FrameWriteRequest|<f1>err\ error}"];
 "node-http2Transport" [shape=record,label="{http2Transport|<f0>DialTLS\ func\(string\,\*tls.Config\)\ \(net.Conn\,error\)|<f1>TLSClientConfig\ \*tls.Config|<f2>ConnPool\ http2ClientConnPool|<f3>DisableCompression\ bool|<f4>AllowHTTP\ bool|<f5>MaxHeaderListSize\ uint32|<f6>t1\ \*Transport|<f7>connPoolOnce\ sync.Once|<f8>connPoolOrDef\ http2ClientConnPool}"];
 "node-http2handlerPanicRST" [shape=record,label="{http2handlerPanicRST|<f0>StreamID\ uint32}"];
 "node-Hijacker" [shape=Mrecord,label="{Hijacker\ interface|<f0>Hijack\ func\(\)\ \(net.Conn\,\*bufio.ReadWriter\,error\)}"];
 "node-finishAsyncByteRead" [shape=record,label="{finishAsyncByteRead|<f0>tw\ \*transferWriter}"];
 "node-http2serverConn" [shape=record,label="{http2serverConn|<f0>srv\ \*http2Server|<f1>hs\ \*Server|<f2>conn\ net.Conn|<f3>bw\ \*http2bufferedWriter|<f4>handler\ Handler|<f5>baseCtx\ http2contextContext|<f6>framer\ \*http2Framer|<f7>doneServing\ chan\ struct\ \{\}|<f8>readFrameCh\ chan\ http2readFrameResult|<f9>wantWriteFrameCh\ chan\ http2FrameWriteRequest|<f10>wantStartPushCh\ chan\ http2startPushRequest|<f11>wroteFrameCh\ chan\ http2frameWriteResult|<f12>bodyReadCh\ chan\ http2bodyReadMsg|<f13>testHookCh\ chan\ func\(int\)|<f14>flow\ http2flow|<f15>inflow\ http2flow|<f16>tlsState\ \*tls.ConnectionState|<f17>remoteAddrStr\ string|<f18>writeSched\ http2WriteScheduler|<f19>serveG\ http2goroutineLock|<f20>pushEnabled\ bool|<f21>sawFirstSettings\ bool|<f22>needToSendSettingsAck\ bool|<f23>unackedSettings\ int|<f24>clientMaxStreams\ uint32|<f25>advMaxStreams\ uint32|<f26>curClientStreams\ uint32|<f27>curPushedStreams\ uint32|<f28>maxClientStreamID\ uint32|<f29>maxPushPromiseID\ uint32|<f30>streams\ map\[uint32\]\*http2stream|<f31>initialWindowSize\ int32|<f32>maxFrameSize\ int32|<f33>headerTableSize\ uint32|<f34>peerMaxHeaderListSize\ uint32|<f35>canonHeader\ map\[string\]string|<f36>writingFrame\ bool|<f37>writingFrameAsync\ bool|<f38>needsFrameFlush\ bool|<f39>inGoAway\ bool|<f40>inFrameScheduleLoop\ bool|<f41>needToSendGoAway\ bool|<f42>goAwayCode\ http2ErrCode|<f43>shutdownTimerCh\ chan\ time.Time|<f44>shutdownTimer\ \*time.Timer|<f45>idleTimer\ \*time.Timer|<f46>idleTimerCh\ chan\ time.Time|<f47>headerWriteBuf\ bytes.Buffer|<f48>hpackEncoder\ \*hpack.Encoder}"];
 "node-http2goroutineLock" [shape=ellipse,label="http2goroutineLock\ uint64"];
 "node-http2chunkWriter" [shape=record,label="{http2chunkWriter|<f0>rws\ \*http2responseWriterState}"];
 "node-http2resAndError" [shape=record,label="{http2resAndError|<f0>res\ \*Response|<f1>err\ error}"];
 "node-Transport" [shape=record,label="{Transport|<f0>idleMu\ sync.Mutex|<f1>wantIdle\ bool|<f2>idleConn\ map\[connectMethodKey\]\[\]\*persistConn|<f3>idleConnCh\ map\[connectMethodKey\]chan\ \*persistConn|<f4>idleLRU\ connLRU|<f5>reqMu\ sync.Mutex|<f6>reqCanceler\ map\[\*Request\]func\(error\)|<f7>altMu\ sync.Mutex|<f8>altProto\ atomic.Value|<f9>Proxy\ func\(\*Request\)\ \(\*url.URL\,error\)|<f10>DialContext\ func\(context.Context\,string\)\ \(net.Conn\,error\)|<f11>Dial\ func\(string\)\ \(net.Conn\,error\)|<f12>DialTLS\ func\(string\)\ \(net.Conn\,error\)|<f13>TLSClientConfig\ \*tls.Config|<f14>TLSHandshakeTimeout\ time.Duration|<f15>DisableKeepAlives\ bool|<f16>DisableCompression\ bool|<f17>MaxIdleConns\ int|<f18>MaxIdleConnsPerHost\ int|<f19>IdleConnTimeout\ time.Duration|<f20>ResponseHeaderTimeout\ time.Duration|<f21>ExpectContinueTimeout\ time.Duration|<f22>TLSNextProto\ map\[string\]func\(string\,\*tls.Conn\)\ \(RoundTripper\)|<f23>ProxyConnectHeader\ Header|<f24>MaxResponseHeaderBytes\ int64|<f25>nextProtoOnce\ sync.Once|<f26>h2transport\ \*http2Transport}"];
 "node-http2noDialClientConnPool" [shape=record,label="{http2noDialClientConnPool|<f0>\*http2clientConnPool}"];
 "node-ResponseWriter" [shape=Mrecord,label="{ResponseWriter\ interface|<f0>Header\ func\(\)\ \(Header\)|<f1>Write\ func\(\[\]byte\)\ \(int\,error\)|<f2>WriteHeader\ func\(int\)}"];
 "node-serverHandler" [shape=record,label="{serverHandler|<f0>srv\ \*Server}"];
 "node-bodyLocked" [shape=record,label="{bodyLocked|<f0>b\ \*body}"];
 "node-headerSorter" [shape=record,label="{headerSorter|<f0>kvs\ \[\]keyValues}"];
 "node-canceler" [shape=Mrecord,label="{canceler\ interface|<f0>CancelRequest\ func\(\*Request\)}"];
 "node-http2priorityNode" [shape=record,label="{http2priorityNode|<f0>q\ http2writeQueue|<f1>id\ uint32|<f2>weight\ uint8|<f3>state\ http2priorityNodeState|<f4>bytes\ int64|<f5>subtreeBytes\ int64|<f6>parent\ \*http2priorityNode|<f7>kids\ \*http2priorityNode|<f8>prev\,\ next\ \*http2priorityNode}"];
 "node-writeStringer" [shape=Mrecord,label="{writeStringer\ interface|<f0>WriteString\ func\(string\)\ \(int\,error\)}"];
 "node-http2writeWindowUpdate" [shape=record,label="{http2writeWindowUpdate|<f0>streamID\ uint32|<f1>n\ uint32}"];
 "node-http2clientStream" [shape=record,label="{http2clientStream|<f0>cc\ \*http2ClientConn|<f1>req\ \*Request|<f2>trace\ \*http2clientTrace|<f3>ID\ uint32|<f4>resc\ chan\ http2resAndError|<f5>bufPipe\ http2pipe|<f6>startedWrite\ bool|<f7>requestedGzip\ bool|<f8>on100\ func\(\)|<f9>flow\ http2flow|<f10>inflow\ http2flow|<f11>bytesRemain\ int64|<f12>readErr\ error|<f13>stopReqBody\ error|<f14>didReset\ bool|<f15>peerReset\ chan\ struct\ \{\}|<f16>resetErr\ error|<f17>done\ chan\ struct\ \{\}|<f18>firstByte\ bool|<f19>pastHeaders\ bool|<f20>pastTrailers\ bool|<f21>trailer\ Header|<f22>resTrailer\ \*Header}"];
 "node-http2flushFrameWriter" [shape=record,label="{http2flushFrameWriter|}"];
 "node-http2writePingAck" [shape=record,label="{http2writePingAck|<f0>pf\ \*http2PingFrame}"];
 "node-HandlerFunc" [shape=rectangle,label="HandlerFunc\ func\(ResponseWriter\,\*Request\)"];
 "node-condResult" [shape=ellipse,label="condResult\ int"];
 "node-http2ContinuationFrame" [shape=record,label="{http2ContinuationFrame|<f0>http2FrameHeader|<f1>headerFragBuf\ \[\]byte}"];
 "node-transferWriter" [shape=record,label="{transferWriter|<f0>Method\ string|<f1>Body\ io.Reader|<f2>BodyCloser\ io.Closer|<f3>ResponseToHEAD\ bool|<f4>ContentLength\ int64|<f5>Close\ bool|<f6>TransferEncoding\ \[\]string|<f7>Trailer\ Header|<f8>IsResponse\ bool|<f9>FlushHeaders\ bool|<f10>ByteReadCh\ chan\ readResult}"];
 "node-bodyEOFSignal" [shape=record,label="{bodyEOFSignal|<f0>body\ io.ReadCloser|<f1>mu\ sync.Mutex|<f2>closed\ bool|<f3>rerr\ error|<f4>fn\ func\(error\)\ \(error\)|<f5>earlyCloseFn\ func\(\)\ \(error\)}"];
 "node-http2writeData" [shape=record,label="{http2writeData|<f0>streamID\ uint32|<f1>p\ \[\]byte|<f2>endStream\ bool}"];
 "node-http2HeadersFrame" [shape=record,label="{http2HeadersFrame|<f0>http2FrameHeader|<f1>Priority\ http2PriorityParam|<f2>headerFragBuf\ \[\]byte}"];
 "node-extraHeader" [shape=record,label="{extraHeader|<f0>contentType\ string|<f1>connection\ string|<f2>transferEncoding\ string|<f3>date\ \[\]byte|<f4>contentLength\ \[\]byte}"];
 "node-closeWriter" [shape=Mrecord,label="{closeWriter\ interface|<f0>CloseWrite\ func\(\)\ \(error\)}"];
 "node-loggingConn" [shape=record,label="{loggingConn|<f0>name\ string|<f1>net.Conn}"];
 "node-delegateReader" [shape=record,label="{delegateReader|<f0>c\ chan\ io.Reader|<f1>r\ io.Reader}"];
 "node-readResult" [shape=record,label="{readResult|<f0>n\ int|<f1>err\ error|<f2>b\ byte}"];
 "node-globalOptionsHandler" [shape=record,label="{globalOptionsHandler|}"];
 "node-fileTransport" [shape=record,label="{fileTransport|<f0>fh\ fileHandler}"];
 "node-closeChecker" [shape=record,label="{closeChecker|<f0>io.Reader|<f1>closed\ bool}"];
 "node-I" [shape=Mrecord,label="{I\ interface|<f0>doKeepAlives\ func\(\)\ \(bool\)}"];
 "node-http2WriteScheduler" [shape=Mrecord,label="{http2WriteScheduler\ interface|<f0>OpenStream\ func\(uint32\,http2OpenStreamOptions\)|<f1>CloseStream\ func\(uint32\)|<f2>AdjustStream\ func\(uint32\,http2PriorityParam\)|<f3>Push\ func\(http2FrameWriteRequest\)|<f4>Pop\ func\(\)\ \(http2FrameWriteRequest\,bool\)}"];
 "node-expectContinueReader" [shape=record,label="{expectContinueReader|<f0>resp\ \*response|<f1>readCloser\ io.ReadCloser|<f2>closed\ bool|<f3>sawEOF\ bool}"];
 "node-http2MetaHeadersFrame" [shape=record,label="{http2MetaHeadersFrame|<f0>\*http2HeadersFrame|<f1>Fields\ \[\]hpack.HeaderField|<f2>Truncated\ bool}"];
 "node-populateResponse" [shape=record,label="{populateResponse|<f0>res\ \*Response|<f1>ch\ chan\ \*Response|<f2>wroteHeader\ bool|<f3>hasContent\ bool|<f4>sentResponse\ bool|<f5>pw\ \*io.PipeWriter}"];
 "node-gzipReader" [shape=record,label="{gzipReader|<f0>body\ \*bodyEOFSignal|<f1>zr\ \*gzip.Reader|<f2>zerr\ error}"];
 "node-http2writeGoAway" [shape=record,label="{http2writeGoAway|<f0>maxStreamID\ uint32|<f1>code\ http2ErrCode}"];
 "node-http2Setting" [shape=record,label="{http2Setting|<f0>ID\ http2SettingID|<f1>Val\ uint32}"];
 "node-Handler" [shape=Mrecord,label="{Handler\ interface|<f0>ServeHTTP\ func\(ResponseWriter\,\*Request\)}"];
 "node-http2httpError" [shape=record,label="{http2httpError|<f0>msg\ string|<f1>timeout\ bool}"];
 "node-http2stickyErrWriter" [shape=record,label="{http2stickyErrWriter|<f0>w\ io.Writer|<f1>err\ \*error}"];
 "node-http2bodyWriterState" [shape=record,label="{http2bodyWriterState|<f0>cs\ \*http2clientStream|<f1>timer\ \*time.Timer|<f2>fnonce\ \*sync.Once|<f3>fn\ func\(\)|<f4>resc\ chan\ error|<f5>delay\ time.Duration}"];
 "node-http2clientConnPool" [shape=record,label="{http2clientConnPool|<f0>t\ \*http2Transport|<f1>mu\ sync.Mutex|<f2>conns\ map\[string\]\[\]\*http2ClientConn|<f3>dialing\ map\[string\]\*http2dialCall|<f4>keys\ map\[\*http2ClientConn\]\[\]string|<f5>addConnCalls\ map\[string\]\*http2addConnCall}"];
 "node-http2pseudoHeaderError" [shape=ellipse,label="http2pseudoHeaderError\ string"];
 "node-http2duplicatePseudoHeaderError" [shape=ellipse,label="http2duplicatePseudoHeaderError\ string"];
 "node-chunkWriter" [shape=record,label="{chunkWriter|<f0>res\ \*response|<f1>header\ Header|<f2>wroteHeader\ bool|<f3>chunking\ bool}"];
 "node-redirectHandler" [shape=record,label="{redirectHandler|<f0>url\ string|<f1>code\ int}"];
 "node-responseAndError" [shape=record,label="{responseAndError|<f0>res\ \*Response|<f1>err\ error}"];
 "node-cancelTimerBody" [shape=record,label="{cancelTimerBody|<f0>stop\ func\(\)|<f1>rc\ io.ReadCloser|<f2>reqDidTimeout\ func\(\)\ \(bool\)}"];
 "node-http2Frame" [shape=Mrecord,label="{http2Frame\ interface|<f0>Header\ func\(\)\ \(http2FrameHeader\)|<f1>invalidate\ func\(\)}"];
 "node-http2sorter" [shape=record,label="{http2sorter|<f0>v\ \[\]string}"];
 "node-http2stream" [shape=record,label="{http2stream|<f0>sc\ \*http2serverConn|<f1>id\ uint32|<f2>body\ \*http2pipe|<f3>cw\ http2closeWaiter|<f4>ctx\ http2contextContext|<f5>cancelCtx\ func\(\)|<f6>bodyBytes\ int64|<f7>declBodyBytes\ int64|<f8>flow\ http2flow|<f9>inflow\ http2flow|<f10>parent\ \*http2stream|<f11>numTrailerValues\ int64|<f12>weight\ uint8|<f13>state\ http2streamState|<f14>resetQueued\ bool|<f15>gotTrailerHeader\ bool|<f16>wroteHeaders\ bool|<f17>reqBuf\ \[\]byte|<f18>trailer\ Header|<f19>reqTrailer\ Header}"];
 "node-timeoutHandler" [shape=record,label="{timeoutHandler|<f0>handler\ Handler|<f1>body\ string|<f2>dt\ time.Duration|<f3>testTimeout\ chan\ time.Time}"];
 "node-http2clientConnPoolIdleCloser" [shape=Mrecord,label="{http2clientConnPoolIdleCloser\ interface|<f0>http2ClientConnPool|<f1>closeIdleConnections\ func\(\)}"];
 "node-http2PushPromiseFrame" [shape=record,label="{http2PushPromiseFrame|<f0>http2FrameHeader|<f1>PromiseID\ uint32|<f2>headerFragBuf\ \[\]byte}"];
 "node-http2headersEnder" [shape=Mrecord,label="{http2headersEnder\ interface|<f0>HeadersEnded\ func\(\)\ \(bool\)}"];
 "node-http2frameParser" [shape=rectangle,label="http2frameParser\ func\(http2FrameHeader\,\[\]byte\)\ \(http2Frame\,error\)"];
 "node-http2WindowUpdateFrame" [shape=record,label="{http2WindowUpdateFrame|<f0>http2FrameHeader|<f1>Increment\ uint32}"];
 "node-maxBytesReader" [shape=record,label="{maxBytesReader|<f0>w\ ResponseWriter|<f1>r\ io.ReadCloser|<f2>n\ int64|<f3>err\ error}"];
 "node-maskedSig" [shape=record,label="{maskedSig|<f0>mask\,\ pat\ \[\]byte|<f1>skipWS\ bool|<f2>ct\ string}"];
 "node-textSig" [shape=record,label="{textSig|}"];
 "node-byteReader" [shape=record,label="{byteReader|<f0>b\ byte|<f1>done\ bool}"];
 "node-http2priorityNodeState" [shape=ellipse,label="http2priorityNodeState\ int"];
 "node-persistConnWriter" [shape=record,label="{persistConnWriter|<f0>pc\ \*persistConn}"];
 "node-requestAndChan" [shape=record,label="{requestAndChan|<f0>req\ \*Request|<f1>ch\ chan\ responseAndError|<f2>addedGzip\ bool|<f3>continueCh\ chan\ struct\ \{\}|<f4>callerGone\ chan\ struct\ \{\}}"];
 "node-Dir" [shape=ellipse,label="Dir\ string"];
 "node-http2Framer" [shape=record,label="{http2Framer|<f0>r\ io.Reader|<f1>lastFrame\ http2Frame|<f2>errDetail\ error|<f3>lastHeaderStream\ uint32|<f4>maxReadSize\ uint32|<f5>headerBuf\ \[\]byte|<f6>getReadBuf\ func\(uint32\)\ \(\[\]byte\)|<f7>readBuf\ \[\]byte|<f8>maxWriteSize\ uint32|<f9>w\ io.Writer|<f10>wbuf\ \[\]byte|<f11>AllowIllegalWrites\ bool|<f12>AllowIllegalReads\ bool|<f13>ReadMetaHeaders\ \*hpack.Decoder|<f14>MaxHeaderListSize\ uint32|<f15>logReads\,\ logWrites\ bool|<f16>debugFramer\ \*http2Framer|<f17>debugFramerBuf\ \*bytes.Buffer|<f18>debugReadLoggerf\ func\(string\,\.\.\.interface\{\}\)|<f19>debugWriteLoggerf\ func\(string\,\.\.\.interface\{\}\)}"];
 "node-http2requestParam" [shape=record,label="{http2requestParam|<f0>method\ string|<f1>scheme\,\ authority\,\ path\ string|<f2>header\ Header}"];
 "node-http2gzipReader" [shape=record,label="{http2gzipReader|<f0>body\ io.ReadCloser|<f1>zr\ \*gzip.Reader|<f2>zerr\ error}"];
 "node-http2PriorityWriteSchedulerConfig" [shape=record,label="{http2PriorityWriteSchedulerConfig|<f0>MaxClosedNodesInTree\ int|<f1>MaxIdleNodesInTree\ int|<f2>ThrottleOutOfOrderWrites\ bool}"];
 "node-Client" [shape=record,label="{Client|<f0>Transport\ RoundTripper|<f1>CheckRedirect\ func\(\*Request\,\[\]\*Request\)\ \(error\)|<f2>Jar\ CookieJar|<f3>Timeout\ time.Duration}"];
 "node-http2streamState" [shape=ellipse,label="http2streamState\ int"];
 "node-http2badStringError" [shape=record,label="{http2badStringError|<f0>what\ string|<f1>str\ string}"];
 "node-responseLocationTest" [shape=record,label="{responseLocationTest|<f0>location\ string|<f1>requrl\ string|<f2>want\ string|<f3>wantErr\ error}"];
 "node-http2writePushPromise" [shape=record,label="{http2writePushPromise|<f0>streamID\ uint32|<f1>method\ string|<f2>url\ \*url.URL|<f3>h\ Header|<f4>allocatePromisedID\ func\(\)\ \(uint32\,error\)|<f5>promisedID\ uint32}"];
 "node-nothingWrittenError" [shape=record,label="{nothingWrittenError|<f0>error}"];
 "node-http2dialCall" [shape=record,label="{http2dialCall|<f0>p\ \*http2clientConnPool|<f1>done\ chan\ struct\ \{\}|<f2>res\ \*http2ClientConn|<f3>err\ error}"];
 "node-Server" [shape=record,label="{Server|<f0>Addr\ string|<f1>Handler\ Handler|<f2>TLSConfig\ \*tls.Config|<f3>ReadTimeout\ time.Duration|<f4>ReadHeaderTimeout\ time.Duration|<f5>WriteTimeout\ time.Duration|<f6>IdleTimeout\ time.Duration|<f7>MaxHeaderBytes\ int|<f8>TLSNextProto\ map\[string\]func\(\*Server\,\*tls.Conn\,Handler\)|<f9>ConnState\ func\(net.Conn\,ConnState\)|<f10>ErrorLog\ \*log.Logger|<f11>disableKeepAlives\ int32|<f12>inShutdown\ int32|<f13>nextProtoOnce\ sync.Once|<f14>nextProtoErr\ error|<f15>mu\ sync.Mutex|<f16>listeners\ map\[net.Listener\]struct\ \{\}|<f17>activeConn\ map\[\*conn\]struct\ \{\}|<f18>doneChan\ chan\ struct\ \{\}}"];
 "node-htmlSig" [shape=rectangle,label="htmlSig\ \[\]byte"];
 "node-RoundTripper" [shape=Mrecord,label="{RoundTripper\ interface|<f0>RoundTrip\ func\(\*Request\)\ \(\*Response\,error\)}"];
 "node-http2responseWriter" [shape=record,label="{http2responseWriter|<f0>rws\ \*http2responseWriterState}"];
 "node-http2startPushRequest" [shape=record,label="{http2startPushRequest|<f0>parent\ \*http2stream|<f1>method\ string|<f2>url\ \*url.URL|<f3>header\ Header|<f4>done\ chan\ error}"];
 "node-http2clientConnReadLoop" [shape=record,label="{http2clientConnReadLoop|<f0>cc\ \*http2ClientConn|<f1>activeRes\ map\[uint32\]\*http2clientStream|<f2>closeWhenIdle\ bool}"];
 "node-body" [shape=record,label="{body|<f0>src\ io.Reader|<f1>hdr\ interface\{\}|<f2>r\ \*bufio.Reader|<f3>closing\ bool|<f4>doEarlyClose\ bool|<f5>mu\ sync.Mutex|<f6>sawEOF\ bool|<f7>closed\ bool|<f8>earlyClose\ bool|<f9>onHitEOF\ func\(\)}"];
 "node-http2pipeBuffer" [shape=Mrecord,label="{http2pipeBuffer\ interface|<f0>Len\ func\(\)\ \(int\)|<f1>io.Writer|<f2>io.Reader}"];
 "node-transportRequest" [shape=record,label="{transportRequest|<f0>\*Request|<f1>extra\ Header|<f2>trace\ \*httptrace.ClientTrace}"];
 "node-connectMethod" [shape=record,label="{connectMethod|<f0>proxyURL\ \*url.URL|<f1>targetScheme\ string|<f2>targetAddr\ string}"];
 "node-httpError" [shape=record,label="{httpError|<f0>err\ string|<f1>timeout\ bool}"];
 "node-http2headerFieldNameError" [shape=ellipse,label="http2headerFieldNameError\ string"];
 "node-http2SettingsFrame" [shape=record,label="{http2SettingsFrame|<f0>http2FrameHeader|<f1>p\ \[\]byte}"];
 "node-tcpKeepAliveListener" [shape=record,label="{tcpKeepAliveListener|<f0>\*net.TCPListener}"];
 "node-errorReader" [shape=record,label="{errorReader|<f0>err\ error}"];
 "node-http2gate" [shape=box,label="http2gate\ chan\ struct\ \{\}"];
 "node-http2addConnCall" [shape=record,label="{http2addConnCall|<f0>p\ \*http2clientConnPool|<f1>done\ chan\ struct\ \{\}|<f2>err\ error}"];
 "node-http2connectionStater" [shape=Mrecord,label="{http2connectionStater\ interface|<f0>ConnectionState\ func\(\)\ \(tls.ConnectionState\)}"];
"node-responseAndError":f0 -> "node-Response";
"node-timeoutHandler":f0 -> "node-Handler";
"node-http2Frame":f0 -> "node-http2FrameHeader";
"node-http2stream":f0 -> "node-http2serverConn";
"node-http2stream":f2 -> "node-http2pipe";
"node-http2stream":f3 -> "node-http2closeWaiter";
"node-http2stream":f4 -> "node-http2contextContext";
"node-http2stream":f8 -> "node-http2flow";
"node-http2stream":f9 -> "node-http2flow";
"node-http2stream":f10 -> "node-http2stream";
"node-http2stream":f13 -> "node-http2streamState";
"node-http2stream":f18 -> "node-Header";
"node-http2stream":f19 -> "node-Header";
"node-http2clientConnPoolIdleCloser":f0 -> "node-http2ClientConnPool";
"node-http2PushPromiseFrame":f0 -> "node-http2FrameHeader";
"node-http2frameParser":f0 -> "node-http2FrameHeader";
"node-http2frameParser":f2 -> "node-http2Frame";
"node-http2WindowUpdateFrame":f0 -> "node-http2FrameHeader";
"node-maxBytesReader":f0 -> "node-ResponseWriter";
"node-persistConnWriter":f0 -> "node-persistConn";
"node-requestAndChan":f0 -> "node-Request";
"node-requestAndChan":f1 -> "node-responseAndError";
"node-http2Framer":f1 -> "node-http2Frame";
"node-http2Framer":f16 -> "node-http2Framer";
"node-http2requestParam":f2 -> "node-Header";
"node-Client":f0 -> "node-RoundTripper";
"node-Client":f1 -> "node-Request";
"node-Client":f1 -> "node-Request";
"node-Client":f2 -> "node-CookieJar";
"node-http2writePushPromise":f3 -> "node-Header";
"node-http2dialCall":f0 -> "node-http2clientConnPool";
"node-http2dialCall":f2 -> "node-http2ClientConn";
"node-Server":f1 -> "node-Handler";
"node-Server":f8 -> "node-Server";
"node-Server":f8 -> "node-Handler";
"node-Server":f9 -> "node-ConnState";
"node-Server":f17 -> "node-conn";
"node-RoundTripper":f0 -> "node-Request";
"node-RoundTripper":f0 -> "node-Response";
"node-http2responseWriter":f0 -> "node-http2responseWriterState";
"node-http2startPushRequest":f0 -> "node-http2stream";
"node-http2startPushRequest":f3 -> "node-Header";
"node-http2clientConnReadLoop":f0 -> "node-http2ClientConn";
"node-http2clientConnReadLoop":f1 -> "node-http2clientStream";
"node-transportRequest":f0 -> "node-Request";
"node-transportRequest":f1 -> "node-Header";
"node-http2SettingsFrame":f0 -> "node-http2FrameHeader";
"node-http2addConnCall":f0 -> "node-http2clientConnPool";
"node-http2ClientConn":f0 -> "node-http2Transport";
"node-http2ClientConn":f10 -> "node-http2flow";
"node-http2ClientConn":f11 -> "node-http2flow";
"node-http2ClientConn":f14 -> "node-http2GoAwayFrame";
"node-http2ClientConn":f16 -> "node-http2clientStream";
"node-http2ClientConn":f21 -> "node-http2Framer";
"node-http2writeFramer":f0 -> "node-http2writeContext";
"node-http2writeContext":f0 -> "node-http2Framer";
"node-http2DataFrame":f0 -> "node-http2FrameHeader";
"node-CookieJar":f0 -> "node-Cookie";
"node-CookieJar":f1 -> "node-Cookie";
"node-dialRes":f0 -> "node-persistConn";
"node-http2StreamError":f1 -> "node-http2ErrCode";
"node-http2writeResHeaders":f2 -> "node-Header";
"node-ServeMux":f1 -> "node-muxEntry";
"node-transferReader":f0 -> "node-Header";
"node-transferReader":f9 -> "node-Header";
"node-respTest":f1 -> "node-Response";
"node-http2transportResponseBody":f0 -> "node-http2clientStream";
"node-http2UnknownFrame":f0 -> "node-http2FrameHeader";
"node-http2bodyReadMsg":f0 -> "node-http2stream";
"node-http2GoAwayError":f1 -> "node-http2ErrCode";
"node-Request":f5 -> "node-Header";
"node-Request":f15 -> "node-Header";
"node-Request":f20 -> "node-Response";
"node-FileSystem":f0 -> "node-File";
"node-http2headersOrContinuation":f0 -> "node-http2headersEnder";
"node-Pusher":f0 -> "node-PushOptions";
"node-http2FrameWriteRequest":f0 -> "node-http2writeFramer";
"node-http2FrameWriteRequest":f1 -> "node-http2stream";
"node-muxEntry":f1 -> "node-Handler";
"node-writeRequest":f0 -> "node-transportRequest";
"node-http2noDialH2RoundTripper":f0 -> "node-http2Transport";
"node-http2pushOptions":f1 -> "node-Header";
"node-reqTest":f1 -> "node-Request";
"node-reqTest":f3 -> "node-Header";
"node-http2priorityWriteScheduler":f0 -> "node-http2priorityNode";
"node-http2priorityWriteScheduler":f1 -> "node-http2priorityNode";
"node-http2priorityWriteScheduler":f3 -> "node-http2priorityNode";
"node-http2priorityWriteScheduler":f8 -> "node-http2priorityNode";
"node-http2priorityWriteScheduler":f9 -> "node-http2writeQueuePool";
"node-initNPNRequest":f1 -> "node-serverHandler";
"node-http2PingFrame":f0 -> "node-http2FrameHeader";
"node-reqWriteTest":f0 -> "node-Request";
"node-respWriteTest":f0 -> "node-Response";
"node-http2RSTStreamFrame":f0 -> "node-http2FrameHeader";
"node-http2RSTStreamFrame":f1 -> "node-http2ErrCode";
"node-conn":f0 -> "node-Server";
"node-conn":f6 -> "node-connReader";
"node-http2GoAwayFrame":f0 -> "node-http2FrameHeader";
"node-http2GoAwayFrame":f2 -> "node-http2ErrCode";
"node-http2readFrameResult":f0 -> "node-http2Frame";
"node-http2pipe":f2 -> "node-http2pipeBuffer";
"node-http2requestBody":f0 -> "node-http2stream";
"node-http2requestBody":f1 -> "node-http2serverConn";
"node-http2requestBody":f4 -> "node-http2pipe";
"node-testCase":f4 -> "node-testCase";
"node-Response":f5 -> "node-Header";
"node-Response":f11 -> "node-Header";
"node-Response":f12 -> "node-Request";
"node-PushOptions":f1 -> "node-Header";
"node-response":f0 -> "node-conn";
"node-response":f1 -> "node-Request";
"node-response":f9 -> "node-chunkWriter";
"node-response":f10 -> "node-Header";
"node-response":f18 -> "node-atomicBool";
"node-http2Server":f5 -> "node-http2WriteScheduler";
"node-http2ServeConnOpts":f0 -> "node-Server";
"node-http2ServeConnOpts":f1 -> "node-Handler";
"node-http2ClientConnPool":f0 -> "node-Request";
"node-http2ClientConnPool":f0 -> "node-http2ClientConn";
"node-http2ClientConnPool":f1 -> "node-http2ClientConn";
"node-connReader":f0 -> "node-conn";
"node-http2writeQueue":f0 -> "node-http2FrameWriteRequest";
"node-http2randomWriteScheduler":f0 -> "node-http2writeQueue";
"node-http2randomWriteScheduler":f1 -> "node-http2writeQueue";
"node-http2randomWriteScheduler":f2 -> "node-http2writeQueuePool";
"node-http2connError":f0 -> "node-http2ErrCode";
"node-http2HeadersFrameParam":f5 -> "node-http2PriorityParam";
"node-http2flow":f1 -> "node-http2flow";
"node-http2responseWriterState":f0 -> "node-http2stream";
"node-http2responseWriterState":f1 -> "node-Request";
"node-http2responseWriterState":f2 -> "node-http2requestBody";
"node-http2responseWriterState":f3 -> "node-http2serverConn";
"node-http2responseWriterState":f5 -> "node-Header";
"node-http2responseWriterState":f6 -> "node-Header";
"node-persistConn":f0 -> "node-RoundTripper";
"node-persistConn":f1 -> "node-Transport";
"node-persistConn":f2 -> "node-connectMethodKey";
"node-persistConn":f8 -> "node-requestAndChan";
"node-persistConn":f9 -> "node-writeRequest";
"node-persistConn":f24 -> "node-Header";
"node-timeoutWriter":f0 -> "node-ResponseWriter";
"node-timeoutWriter":f1 -> "node-Header";
"node-checkConnErrorWriter":f0 -> "node-conn";
"node-fileHandler":f0 -> "node-FileSystem";
"node-http2FrameHeader":f1 -> "node-http2FrameType";
"node-http2FrameHeader":f2 -> "node-http2Flags";
"node-connLRU":f1 -> "node-persistConn";
"node-finishAsyncByteRead":f0 -> "node-transferWriter";
"node-http2PriorityFrame":f0 -> "node-http2FrameHeader";
"node-http2PriorityFrame":f1 -> "node-http2PriorityParam";
"node-http2frameWriteResult":f0 -> "node-http2FrameWriteRequest";
"node-http2Transport":f2 -> "node-http2ClientConnPool";
"node-http2Transport":f6 -> "node-Transport";
"node-http2Transport":f8 -> "node-http2ClientConnPool";
"node-http2serverConn":f0 -> "node-http2Server";
"node-http2serverConn":f1 -> "node-Server";
"node-http2serverConn":f3 -> "node-http2bufferedWriter";
"node-http2serverConn":f4 -> "node-Handler";
"node-http2serverConn":f5 -> "node-http2contextContext";
"node-http2serverConn":f6 -> "node-http2Framer";
"node-http2serverConn":f8 -> "node-http2readFrameResult";
"node-http2serverConn":f9 -> "node-http2FrameWriteRequest";
"node-http2serverConn":f10 -> "node-http2startPushRequest";
"node-http2serverConn":f11 -> "node-http2frameWriteResult";
"node-http2serverConn":f12 -> "node-http2bodyReadMsg";
"node-http2serverConn":f14 -> "node-http2flow";
"node-http2serverConn":f15 -> "node-http2flow";
"node-http2serverConn":f18 -> "node-http2WriteScheduler";
"node-http2serverConn":f19 -> "node-http2goroutineLock";
"node-http2serverConn":f30 -> "node-http2stream";
"node-http2serverConn":f42 -> "node-http2ErrCode";
"node-http2resAndError":f0 -> "node-Response";
"node-http2chunkWriter":f0 -> "node-http2responseWriterState";
"node-Transport":f2 -> "node-connectMethodKey";
"node-Transport":f2 -> "node-persistConn";
"node-Transport":f3 -> "node-connectMethodKey";
"node-Transport":f3 -> "node-persistConn";
"node-Transport":f4 -> "node-connLRU";
"node-Transport":f6 -> "node-Request";
"node-Transport":f9 -> "node-Request";
"node-Transport":f22 -> "node-RoundTripper";
"node-Transport":f23 -> "node-Header";
"node-Transport":f26 -> "node-http2Transport";
"node-http2noDialClientConnPool":f0 -> "node-http2clientConnPool";
"node-ResponseWriter":f0 -> "node-Header";
"node-serverHandler":f0 -> "node-Server";
"node-bodyLocked":f0 -> "node-body";
"node-http2priorityNode":f0 -> "node-http2writeQueue";
"node-http2priorityNode":f3 -> "node-http2priorityNodeState";
"node-http2priorityNode":f6 -> "node-http2priorityNode";
"node-http2priorityNode":f7 -> "node-http2priorityNode";
"node-http2priorityNode":f8 -> "node-http2priorityNode";
"node-headerSorter":f0 -> "node-keyValues";
"node-canceler":f0 -> "node-Request";
"node-http2writePingAck":f0 -> "node-http2PingFrame";
"node-http2clientStream":f0 -> "node-http2ClientConn";
"node-http2clientStream":f1 -> "node-Request";
"node-http2clientStream":f2 -> "node-http2clientTrace";
"node-http2clientStream":f4 -> "node-http2resAndError";
"node-http2clientStream":f5 -> "node-http2pipe";
"node-http2clientStream":f9 -> "node-http2flow";
"node-http2clientStream":f10 -> "node-http2flow";
"node-http2clientStream":f21 -> "node-Header";
"node-http2clientStream":f22 -> "node-Header";
"node-HandlerFunc":f0 -> "node-ResponseWriter";
"node-HandlerFunc":f1 -> "node-Request";
"node-http2ContinuationFrame":f0 -> "node-http2FrameHeader";
"node-transferWriter":f7 -> "node-Header";
"node-transferWriter":f10 -> "node-readResult";
"node-http2HeadersFrame":f0 -> "node-http2FrameHeader";
"node-http2HeadersFrame":f1 -> "node-http2PriorityParam";
"node-fileTransport":f0 -> "node-fileHandler";
"node-expectContinueReader":f0 -> "node-response";
"node-http2WriteScheduler":f0 -> "node-http2OpenStreamOptions";
"node-http2WriteScheduler":f2 -> "node-http2PriorityParam";
"node-http2WriteScheduler":f3 -> "node-http2FrameWriteRequest";
"node-http2WriteScheduler":f4 -> "node-http2FrameWriteRequest";
"node-http2MetaHeadersFrame":f0 -> "node-http2HeadersFrame";
"node-populateResponse":f0 -> "node-Response";
"node-populateResponse":f1 -> "node-Response";
"node-gzipReader":f0 -> "node-bodyEOFSignal";
"node-http2writeGoAway":f1 -> "node-http2ErrCode";
"node-http2Setting":f0 -> "node-http2SettingID";
"node-Handler":f0 -> "node-ResponseWriter";
"node-Handler":f0 -> "node-Request";
"node-http2bodyWriterState":f0 -> "node-http2clientStream";
"node-http2clientConnPool":f0 -> "node-http2Transport";
"node-http2clientConnPool":f2 -> "node-http2ClientConn";
"node-http2clientConnPool":f3 -> "node-http2dialCall";
"node-http2clientConnPool":f4 -> "node-http2ClientConn";
"node-http2clientConnPool":f5 -> "node-http2addConnCall";
"node-chunkWriter":f0 -> "node-response";
"node-chunkWriter":f1 -> "node-Header";
}
}

